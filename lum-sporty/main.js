// 2020/11/24 タイリングペイントに対応
// 2020/12/20 WINDOW命令に対応
// 2020/12/22 gra をクラスに変更
// 2020/12/23 スキャンライン・シードペイントアルゴリズムに変更
// 2020/12/26 ステンシルバッファ判定に変更

'use strict';

let flgRot90 = true;	//縦表示フラグ

let g_sc = 1.0;	//:1:200line 2:400line
let g_h = 200*g_sc;


//ゆっくり描画のための処理
let g_flgSleep = false;
const sleep = msec => new Promise(resolve => setTimeout(resolve, msec));
	
class GRA
{
	constructor( context, width, height )
	{
		this.img = context.createImageData( width, height );
		this.stencil = new Array( width*height );

		//-----------------------------------------------------------------------------
		this.window = function( x0,y0,x1,y1, x2,y2,x3,y3 )
		//-----------------------------------------------------------------------------
		{
			this.x0 = x0;
			this.y0 = y0;
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
			this.x3 = x3;
			this.y3 = y3;

			this.sw = (this.x1-this.x0+1)/(this.x3-this.x2+1);
			this.sh = (this.y1-this.y0+1)/(this.y3-this.y2+1);
		}

		this.window( 
			0,
			0,
			width-1,
			height-1,
			0,
			0,
			width-1,
			height-1
		);

		//-----------------------------------------------------------------------------
		this.window_conv = function( _ox, _oy )
		//-----------------------------------------------------------------------------
		{
			let ox = (_ox-this.x2)*this.sw;	// window対応
			let	oy = (_oy-this.y2)*this.sh;	// window対応
			ox=Math.round(ox);
			oy=Math.round(oy);
			return [ox,oy];
		}
		//-----------------------------------------------------------------------------
		this.window_revconv = function( _ox, _oy )
		//-----------------------------------------------------------------------------
		{
			let ox = _ox/this.sw +this.x2;	// window対応
			let oy = _oy/this.sh +this.y2;	// window対応
			ox=Math.round(ox);
			oy=Math.round(oy);
			return [ox,oy];
		}



		//-----------------------------------------------------------------------------
		this.cls = function( col, a =0xff )
		//-----------------------------------------------------------------------------
		{
			for (let x=0; x<this.img.width ; x++ )
			for (let y=0; y<this.img.height ; y++ )
			{
				let adr = (y*this.img.width+x)*4;
				this.img.data[ adr +0 ] = (col>>16)&0xff;
				this.img.data[ adr +1 ] = (col>> 8)&0xff;
				this.img.data[ adr +2 ] = (col>> 0)&0xff;
				this.img.data[ adr +3 ] = a;
			}
		}
		//-----------------------------------------------------------------------------
		this.rgb = function( r,g,b )	// xRGB 8:8:8:8 
		//-----------------------------------------------------------------------------
		{
			return (r<<16)|(g<<8)|b;
		}
		//-----------------------------------------------------------------------------
		this.point = function( x, y )
		//-----------------------------------------------------------------------------
		{
			let adr = (y*this.img.width+x)*4;
			let r = this.img.data[ adr +0 ];
			let g = this.img.data[ adr +1 ];
			let b = this.img.data[ adr +2 ];
		//	let a = this.img.data[ adr +3 ];
			return this.rgb(r,g,b);
		}
		//-----------------------------------------------------------------------------
		this.pset0 = function( _ox, _oy, col, a=0xff )
		//-----------------------------------------------------------------------------
		{
			let x = Math.floor(_ox);
			let y = Math.floor(_oy);
			if ( x < 0 ) return;
			if ( y < 0 ) return;
			if ( x >= this.img.width ) return;
			if ( y >= this.img.height ) return;

			let adr = (y*this.img.width+x)*4;
			this.img.data[ adr +0 ] = (col>>16)&0xff;
			this.img.data[ adr +1 ] = (col>> 8)&0xff;
			this.img.data[ adr +2 ] = (col>> 0)&0xff;
			this.img.data[ adr +3 ] = a&0xff;
		}
		//-----------------------------------------------------------------------------
		this.pset = function( _px, _py, col )
		//-----------------------------------------------------------------------------
		{
			let [px,py] = this.window_conv( _px, _py );
			this.pset0( px, py, col );
		}

		//-----------------------------------------------------------------------------
		this.stencil_point = function( x, y )
		//-----------------------------------------------------------------------------
		{
			let adr = (y*this.img.width+x);
			let r = this.stencil[ adr ];
			return r;
		}
		//-----------------------------------------------------------------------------
		this.stencil_pset = function( x, y, a )
		//-----------------------------------------------------------------------------
		{
			let adr = (y*this.img.width+x);
			this.stencil[ adr ] = a;
		}

		//-----------------------------------------------------------------------------
		this.line = function( _x1, _y1, _x2, _y2, col ) 
		//-----------------------------------------------------------------------------
		{
			let [x1,y1] = this.window_conv( _x1, _y1 );
			let [x2,y2] = this.window_conv( _x2, _y2 );


			//ブレセンハムの線分発生アルゴリズム

			// 二点間の距離
			let dx = ( x2 > x1 ) ? x2 - x1 : x1 - x2;
			let dy = ( y2 > y1 ) ? y2 - y1 : y1 - y2;

			// 二点の方向
			let sx = ( x2 > x1 ) ? 1 : -1;
			let sy = ( y2 > y1 ) ? 1 : -1;

			if ( dx > dy ) 
			{
				// 傾きが1より小さい場合
				let E = -dx;
				for ( let i = 0 ; i <= dx ; i++ ) 
				{
					this.pset0( x1,y1, col );
					x1 += sx;
					E += 2 * dy;
					if ( E >= 0 ) 
					{
						y1 += sy;
						E -= 2 * dx;
					}
				}
			}
			else
			{
				// 傾きが1以上の場合
				let E = -dy;
				for ( let i = 0 ; i <= dy ; i++ )
				{
					this.pset0( x1, y1, col );
					y1 += sy;
					E += 2 * dx;
					if ( E >= 0 )
					{
						x1 += sx;
						E -= 2 * dy;
					}
				}
			}

		}
		//-----------------------------------------------------------------------------
		this.box = function( x1,y1, x2,y2, col )
		//-----------------------------------------------------------------------------
		{

			this.line( x1,y1,x2,y1, col);
			this.line( x1,y2,x2,y2, col);
			this.line( x1,y1,x1,y2, col);
			this.line( x2,y1,x2,y2, col);
		}

		//-----------------------------------------------------------------------------
		this.circle = function( x,y,r,col, scy=1 )
		//-----------------------------------------------------------------------------
		{
			const scx=2;

			let rad = function( deg )
			//-----------------------------------------------------------------------------
			{
				return deg*Math.PI/180;
			}
			{
				let st = rad(1);
				let x0,y0;
				for (  let i = 0 ; i <= Math.PI*2 ; i+=st  )
				{
					let x1 = r * Math.cos(i)*scx + x;
					let y1 = r * Math.sin(i)*scy + y;

					if ( i > 0 ) this.line( x0, y0, x1, y1, col );
					x0 = x1;
					y0 = y1;
				}
			}
		}

		//-----------------------------------------------------------------------------
		this.paint = async function(  _x0, _y0, colsPat, colsRej  ) 
		//-----------------------------------------------------------------------------
		{
		//	呼び出しサンプル
		//	gra.circle(100,100, 20,0xff0000);
		//	gra.paint( 100,100, [[0xffff00]],[0xff0000] );


			let [x0,y0] = this.window_conv( _x0, _y0 );
			let cntlines = 0;

			{
				let c = this.point(x0,y0);
				if ( colsRej.indexOf(c) != -1 ) return cntlines;
			}

			this.stencil.fill(0);

			let seed=[];
			seed.push([x0,y0,0,0,0]); // x,y,dir,lx,rx
			while( seed.length > 0 )
			{
				// 先頭のシードを取り出す
				let sx	= seed[0][0];
				let sy	= seed[0][1];
				let pdi	= seed[0][2];
				let plx	= seed[0][3];
				let prx	= seed[0][4];
				seed.shift();

				// シードから左端を探す
				let lx=sx;
				while( lx >= 0 )
				{
					let c = this.point(lx,sy);
					if ( colsRej.indexOf(c) != -1 ) break;
					let s = this.stencil_point(lx,sy);
					if ( s != 0 ) break;
					lx--;
				}
				lx++;

				// シードから右端探す
				let rx=sx;
				while( rx < this.img.width )
				{
					let c = this.point(rx,sy);
					if ( colsRej.indexOf(c) != -1 ) break;
					let s = this.stencil_point(rx,sy);
					if ( s != 0 ) break;
					rx++;
				}
				rx--;

				// 1ライン塗り
				{
					let iy = Math.floor( sy % colsPat.length );
					let ay = sy*this.img.width;
					for ( let x = lx ; x <=rx ; x++ )
					{
						let ix = Math.floor(  x % colsPat[0].length );
						let col = colsPat[iy][ix];
						let adr = (ay+x);
						this.img.data[ adr*4 +0 ] = (col>>16)&0xff;
						this.img.data[ adr*4 +1 ] = (col>> 8)&0xff;
						this.img.data[ adr*4 +2 ] = (col>> 0)&0xff;
						this.img.data[ adr*4 +3 ] = 0xff;
					
						this.stencil[ adr ] = 1;
					}
					
					if ( cntlines %3 == 1 )
					{
						g_flgSleep = true;
						await sleep(1); // 1msecスリープ
						g_flgSleep = false;
					}
					cntlines++;
				}

				if ( seed.length > 50 ) 
				{
					console.log("err Maybe Over seed sampling:seed=",seed.length);
					break;
				}
				for( let dir of [-1,1] )
				{// 一ライン上（下）のライン内でのペイント領域の右端をすべてシードに加える
					let y=sy+dir;
					if ( dir ==-1 && y < 0 ) continue;
					if ( dir == 1 && y >= this.img.height ) continue;
					let flgBegin = false;
					for ( let x = lx ; x <=rx ; x++ )
					{
						let c = this.point(x,y);
						let s = this.stencil_point(x,y);
						if ( flgBegin == false )
						{
							if ( s == 0 && colsRej.indexOf(c) == -1 )
							{
								flgBegin = true;
							}
						}
						else
						{
							if ( s == 0 && colsRej.indexOf(c) == -1 )
							{}
							else
							{
								seed.push([x-1,y,dir,lx,rx]);
								flgBegin = false;
							}
						}
					}
					if ( flgBegin == true )
					{
								seed.push([rx,y,dir,lx,rx]);
					}
				}
			}
			
			return cntlines;
		}
	}

};

let g_context = html_canvas.getContext('2d');
g_context.imageSmoothingEnabled = g_context.msImageSmoothingEnabled = 0; // スムージングOFF
let gra = new GRA( g_context, 640, g_h );

let g_tblVect = 
[
//顔
/*590 */ 0,513,200,517,193,519,188,526,182,535,177,539,175,548,172,556,172,562,174,568,176,571,177,576,180,582,184,585,187,589,193,591,198,592,203,591,207,588,214,-1,-1,584,210,588,214,590,220,591,225,591,233,590,239,586,249,579,260,576,
/*600 */ 264,569,271,561,278,554,282,545,285,538,285,533,284,529,282,528,280,524,276,519,275,511,274,508,275,502,276,495,280,491,285,480,301,475,309,473,311,467,315,457,318,451,317,442,316,439,315,434,312,436,309,440,302,443,296,448,289,
/*610 */ 453,283,462,273,467,269,476,263,485,260,490,259,499,261,517,267,526,268,531,267,538,255,540,250,546,241,549,238,554,235,550,235,542,238,544,233,547,229,553,223,556,221,553,221,546,224,541,228,542,221,545,216,550,212,561,209,-1,-1,
/*620 */ 568,211,565,210,561,209,554,208,551,208,544,209,541,210,544,207,549,205,553,204,560,204,-1,-1,563,206,560,204,553,201,547,200,543,200,536,202,540,197,546,193,549,192,556,191,562,191,565,192,-1,-1,549,192,547,191,540,190,531,191,
/*630 */ 525,195,520,198,519,199,513,200,-1,-1,591,207,596,219,598,230,598,243,597,252,593,264,584,281,576,290,561,302,549,309,533,315,512,318,504,318,490,316,481,314,473,311,-1,-1,571,177,569,170,569,165,573,145,578,144,583,127,584,119,
/*640 */ 582,107,578,97,573,91,562,84,559,83,562,88,564,95,564,103,563,105,560,92,554,77,548,70,542,66,529,63,519,64,511,67,519,70,525,76,530,82,516,74,503,71,495,71,483,73,473,78,461,88,453,98,448,106,447,110,455,109,460,109,468,111,471,
/*650 */ 113,467,113,463,113,453,114,445,120,440,127,436,139,436,144,438,146,437,151,443,153,444,154,446,159,447,161,451,164,454,167,457,173,459,178,463,188,462,190,463,191,462,197,464,203,469,215,475,218,481,221,-1,-1,513,200,508,201,505,
/*660 */ 201,501,201,496,203,491,206,489,208,487,211,481,221,480,225,483,236,491,250,495,254,498,257,-1,-1,519,199,522,192,529,185,539,179,549,177,552,177,557,179,555,175,560,176,571,181,578,186,584,194,586,200,585,204,582,208,576,211,573,
/*670 */ 211,571,209,571,207,575,202,576,197,575,197,575,194,569,189,560,187,552,187,554,184,548,183,540,184,533,187,527,191,525,195,-1,-1,524,276,535,275,543,272,539,270,550,264,555,260,561,252,565,242,567,234,568,230,567,222,569,222,577,
/*680 */ 225,581,225,583,223,585,230,583,240,577,254,573,260,570,263,570,256,557,269,563,270,557,275,545,280,536,281,528,280,-1,-1,590,239,590,251,588,259,583,269,579,276,-1,-1,575,279,562,292,557,296,548,302,538,305,532,306,525,305,517,
/*690 */ 301,529,301,538,299,542,296,525,297,512,297,502,295,508,299,497,298,504,302,513,305,507,305,511,307,516,308,513,309,506,309,494,306,480,301,-1,-1,556,172,555,167,558,153,561,144,556,148,558,135,560,115,558,104,554,94,547,84,538,
/*700 */ 78,542,87,545,98,546,108,545,119,542,128,547,125,544,133,544,136,544,150,546,165,548,172,-1,-1,539,175,534,172,529,166,527,160,529,142,528,137,526,124,523,117,521,114,521,121,518,117,515,114,511,113,514,117,517,126,510,118,504,113,/*710 */ 500,111,506,111,503,108,499,105,505,104,512,104,517,106,513,100,508,97,512,97,518,100,522,103,529,111,532,117,534,123,536,119,535,110,532,103,528,98,525,96,515,90,504,86,498,86,489,89,481,95,477,101,475,106,483,108,492,114,502,123,
/*720 */ 506,129,509,135,510,140,510,164,514,178,519,188,-1,-1,438,146,442,141,449,134,464,126,475,124,480,124,487,126,493,130,498,136,502,142,506,151,498,145,492,142,478,137,463,136,467,140,462,139,456,141,450,145,443,153,-1,-1,447,161,
/*730 */ 454,152,460,147,469,144,478,146,484,149,487,151,489,155,486,153,478,151,471,151,467,154,474,154,484,157,491,161,500,170,503,176,505,172,507,178,509,185,511,189,517,193,-1,-1,459,178,463,176,468,176,477,179,487,185,499,196,505,201,
/*740 */ -1,-1,463,188,470,188,477,191,474,192,480,194,484,196,483,192,490,198,496,203,-1,-1,462,197,470,199,483,206,489,208,-1,-1,464,203,476,209,483,211,487,211,-1,-1,531,267,526,273,522,274,513,273,505,271,500,271,490,273,482,276,479,
/*750 */ 279,483,280,485,281,478,284,466,297,461,303,455,307,444,311,434,312,-1,-1,576,264,578,271,579,276,579,278,578,279,575,279,570,279,561,278,-1,-1,585,187,586,180,576,180,-1,-1,529,282,528,284,525,285,516,283,511,280,508,275,-1,-1,
/*760 */ 462,197,456,206,454,210,453,215,451,227,451,246,453,256,454,259,459,268,462,273,455,272,450,270,439,266,433,263,430,261,422,253,418,243,416,233,416,226,418,215,421,208,425,203,430,200,437,197,445,195,454,196,462,197,-1,-1,462,190,
/*770 */ 445,189,445,188,438,186,431,184,427,183,422,180,417,178,414,177,406,176,400,177,395,179,391,181,389,183,386,188,377,189,370,185,366,187,355,180,337,172,330,171,333,177,334,183,331,199,323,219,320,229,316,248,316,261,318,278,326,
/*780 */ 283,332,286,336,288,334,291,328,296,320,300,331,300,343,295,356,289,373,288,381,288,386,293,391,297,397,299,403,299,409,298,413,297,420,293,426,289,434,284,439,282,442,282,453,283,-1,-1,436,144,428,140,422,139,418,139,420,142,417,
/*790 */ 142,409,145,404,149,403,152,403,154,404,159,404,162,402,168,-1,-1,403,154,400,158,391,162,386,162,383,159,381,155,380,161,380,173,381,175,385,176,390,176,393,175,395,176,398,176,404,173,408,170,415,167,418,167,423,168,431,157,437,
/*800 */ 151,-1,-1,385,176,389,183,-1,-1,391,297,383,308,386,309,389,312,392,318,396,321,412,326,420,327,-1,-1,396,321,396,325,398,330,403,334,408,343,408,343,408,344,400,350,410,353,414,353,422,349,426,345,431,334,436,330,437,328,439,325,
/*810 */ 441,324,447,321,451,317,-1,-1,403,299,405,304,408,306,414,309,419,313,426,325,431,334,-1,-1,418,139,407,126,397,118,393,109,385,95,373,80,361,67,345,50,339,44,-1,-1,345,50,346,48,348,46,351,46,353,45,355,40,-1,-1,350,41,355,40,356,
/*820 */ 40,358,36,361,31,-1,-1,350,36,361,31,373,23,382,19,382,17,378,15,372,16,363,21,355,25,350,28,339,31,332,35,338,23,339,19,339,15,337,12,335,12,333,19,327,29,323,36,319,42,318,45,319,50,333,72,339,85,347,105,355,116,363,125,369,131,
/*830 */ 381,155,-1,-1,346,48,350,48,351,46,-1,-1,363,21,357,13,356,13,354,14,353,19,355,25,-1,-1,383,308,362,323,354,330,350,335,-1,-1,354,330,344,317,331,306,320,300,-1,-1,400,350,385,356,366,363,351,366,347,366,337,361,328,353,315,338,
/*840 */ 303,321,292,308,285,300,-1,-1,330,171,304,162,304,161,297,158,296,158,297,167,293,187,291,191,286,205,278,220,285,222,287,221,291,216,299,200,303,184,305,170,304,162,-1,-1,287,221,293,224,-1,-1,298,222,293,224,291,225,284,225,282,
/*850 */ 224,276,224,273,225,278,227,284,235,291,252,291,263,291,272,289,282,286,290,298,297,290,300,302,302,308,302,316,302,320,300,-1,-1,334,291,320,296,308,299,302,302,-1,-1,332,286,308,293,295,285,299,273,300,260,298,249,295,240,289,
/*860 */ 231,284,225,-1,-1,291,225,298,231,304,240,309,255,314,265,-1,-1,311,180,308,197,305,209,300,220,-1,-1,320,229,317,230,314,230,308,227,304,224,-1,-1,296,158,277,153,256,148,237,146,215,146,205,145,192,142,185,147,180,152,176,162,
/*870 */ 174,169,174,173,176,185,177,188,193,191,213,198,234,207,262,216,278,220,-1,-1,273,225,247,219,229,217,194,217,196,221,198,227,198,234,197,240,183,274,199,277,215,283,239,294,253,298,265,300,285,300,-1,-1,192,142,190,140,182,135,
/*880 */ 172,137,153,135,139,131,138,128,127,122,115,118,110,118,102,127,95,138,93,142,91,152,91,159,91,165,98,167,103,168,104,170,109,173,117,179,122,182,134,184,138,184,139,186,143,187,147,187,153,187,171,190,175,190,177,188,-1,-1,139,
/*890 */ 131,132,137,127,139,122,140,120,140,111,143,108,149,103,168,-1,-1,123,140,152,152,154,156,154,163,145,181,145,183,147,187,-1,-1,138,184,138,178,141,174,147,166,148,161,147,157,141,156,130,151,120,145,113,153,109,173,-1,-1,161,167,
/*900 */ 160,169,159,175,160,180,162,183,171,184,169,176,168,172,169,167,161,167,-1,-1,194,217,189,213,184,212,174,214,169,213,162,210,154,210,150,211,147,213,145,214,143,216,139,213,130,211,128,211,111,212,111,211,105,208,93,206,87,206,
/*910 */ 81,203,79,203,77,205,75,209,71,227,70,237,70,244,71,251,74,259,80,265,100,268,104,268,111,265,123,260,130,260,137,263,154,271,163,271,174,275,179,277,182,277,183,274,-1,-1,147,213,154,219,161,228,162,232,162,236,159,244,151,254,
/*920 */ 147,259,144,260,133,255,126,253,115,255,113,255,109,252,102,237,102,224,105,208,-1,-1,111,212,108,224,108,230,109,235,112,243,115,248,121,247,129,249,141,253,145,250,154,239,155,235,155,231,150,224,143,216,-1,-1,178,226,190,229,
/*930 */ 181,231,181,233,179,239,175,246,182,248,184,248,188,242,190,236,198,233,188,229,186,226,178,226,-1,-1,110,118,102,112,88,106,74,104,39,103,19,105,14,106,9,109,4,114,2,118,1,122,1,126,3,135,4,137,10,138,57,148,84,156,91,159,-1,-1,
/*940 */ 75,209,31,201,0,195,-1,-1,74,259,53,259,40,256,5,244,0,243,-1,-1,19,105,18,102,16,101,6,99,0,97,-1,-1,10,138,5,142,0,144,-1,-1,533,150,531,153,530,158,530,160,531,163,534,168,541,172,542,172,537,162,534,153,533,150,-1,-1,530,241,
/*950 */ 533,241,538,244,540,248,540,250,-1,-1,530,241,535,246,536,248,536,251,533,255,527,261,530,262,534,261,538,255,-1,-1,525,216,527,213,529,211,532,207,533,204,530,201,525,199,528,198,532,198,537,201,539,205,535,210,530,214,525,216,-1,
/*960 */ -1,514,258,512,256,510,251,510,249,511,245,512,244,-1,-1,514,202,511,206,510,208,511,213,512,215,-1,-1,514,258,514,255,514,253,518,251,522,250,524,250,530,252,532,254,533,255,-1,-1,512,215,512,212,513,210,518,208,524,208,527,209,
/*970 */ 529,211,-1,-1,514,258,516,259,520,260,527,261,-1,-1,525,216,523,217,523,217,513,215,512,215,-1,-1,513,221,510,218,509,218.5,504,221,-1,-1,498,221,499,224,500,227,500,231,498,236,491,231,489,228,489,226,492,223,498,221,-1,-1,487,
/*980 */ 225,486,227,486,228,487,229,-1,-1,513,215,514,212,516,211,520,210,524,211,527,213,-1,-1,530,255,530,256,527,258,522,259,518,258,516,256,518,254,521,253,527,253,530,255,-1,-1,423,194,418,191,409,189,406,189,403,189,394,192,388,196,

/*990 */ 392,207,389,211,388,214,388,217,391,220,392,222,400,223,410,222,411,218,400,218,397,217,396,214,397,212,402,209,413,209,413,205,408,204,403,204,397,206,395,197,399,196,404,196,410,196,416,197,422,200,423,194,-1,-1,411,228,404,227,
/*1000 */ 396,226,391,226,391,231,396,231,400,232,396,235,400,241,391,240,391,245,401,246,411,248,411,242,407,239,404,237,411,234,411,228,-1,-1,380,239,389,248,391,252,391,256,389,260,392,258,396,251,403,254,408,258,394,263,411,265,414,277,
/*1010 */ 414,286,403,275,393,267,400,280,397,284,390,287,384,286,386,278,386,273,385,268,381,278,377,278,381,269,375,276,370,279,366,281,361,282,351,282,345,280,343,279,339,281,335,282,332,282,332,237,338,241,342,247,344,255,344,258,347,
/*1020 */ 258,352,257,355,255,356,253,351,249,346,247,347,241,354,247,358,252,357,246,354,240,359,234,361,240,361,246,359,253,362,251,365,245,367,252,363,256,361,257,364,259,365,262,366,266,366,272,359,271,361,264,360,259,358,265,355,270,
/*1030 */ 351,268,356,260,357,256,352,262,346,265,344,265,343,271,347,274,355,276,359,279,369,274,377,269,381,264,377,264,369,266,370,258,374,258,377,259,384,259,378,252,370,254,373,246,380,239,-1,-1,366,197,373,198,378,201,382,207,383,212,
/*1040 */ 383,218,381,224,376,229,368,232,364,232,359,231,355,228,359,226,351,223,350,219,350,213,352,207,357,200,360,199,366,197,-1,-1,348,188,353,198,353,200,350,204,349,211,346,213,346,218,347,221,343,225,342,230,340,231,335,232,337,228,
/*1050 */ 336,225,338,221,341,218,340,212,342,209,345,205,344,200,347,197,347,195,346,192,348,188,-1,-1,327,231,329,234,330,239,327,247,327,249,329,253,329,255,326,216,326,267,322,262,325,255,322,248,324,242,327,237,327,231,888,888,7,443,
/*1060 */ 153,438,157,429,170,420,174,414,177,-1,-1,422,180,432,173,446,159,-1,-1,451,164,448,168,427,183,-1,-1,454,167,438,186,-1,-1,457,173,450,183,445,188,-1,-1,459,178,456,185,455,189,-1,-1,454,196,452,203,452,211,453,215,-1,-1,454,259,
/*1070 */ 455,272,-1,-1,447,195,445,202,444,220,444,247,446,259,450,270,-1,-1,437,197,436,202,435,219,438,260,439,266,-1,-1,430,200,428,214,427,234,430,261,-1,-1,421,208,420,230,422,253,-1,-1,442,282,443,285,448,289,-1,-1,434,284,437,289,
/*1080 */ 443,296,-1,-1,426,289,433,294,440,302,-1,-1,420,293,432,303,436,309,-1,-1,439,315,441,324,-1,-1,413,297,413,299,428,312,433,319,437,328,-1,-1,525,199,518,200,514,202,-1,-1,530,241,519,242,512,244,-1,-1,347,258,346,265,-1,-1,
/*1090 */ 366,197,359,231,-1,-1,360,199,353,226,888,888,2,406,189,404,196,-1,-1,403,204,402,209,-1,-1,400,218,400,223,-1,-1,404,227,402,231,401,241,401,246,888,888,4,531,191,540,197,-1,-1,547,200,545,203,544,207,-1,-1,544,209,538,217,
/*1100 */ 536,226,536,235,539,232,538,239,538,244,-1,-1,475,218,468,225,466,228,466,231,474,241,491,250,-1,-1,509,218.5,509,220,508,223,507,224,506,224,504,221,-1,-1,512,215,515,218,518,221,518,223,512,234,511,238,510,234,510,230,513,221,
/*1110 */ -1,-1,512,215,511,216,512,219,-1,-1,400,158,394,145,380,127,374,121,365,105,352,85,336,65,327,51,323,40,323,36,-1,-1,350,36,342,39,340,41,339,44,-1,-1,396,321,383,329,359,343,353,345,347,345,343,343,337,331,327,319,308,302,-1,-1,
/*1120 */ 291,263,236,245,213,241,197,240,-1,-1,291,191,278,192,260,192,238,187,210,178,183,173,174,173,-1,-1,71,227,24,218,10,214,0,210,-1,-1,93,142,63,130,34,125,12,125,1,126,-1,-1,529,82,531,85,530,89,527,91,525,96,-1,-1,522,103,520,109,
/*1130 */ 516,111,515,114,888,888,6,544,136,540,140,536,138,531,138,528,137,-1,-1,510,140,507,140,505,142,502,142,-1,-1,492,142,490,147,487,151,-1,-1,486,153,484,157,888,888,4,567,234,564,233,560,233,554,235,-1,-1,506,129,504,132,500,134,
/*1140 */ 498,136,-1,-1,557,296,557,299,561,302,-1,-1,555,260,548,258,545,255,538,255,888,888,6,485,281,491,285,888,888,0,138,243,140,243,142,244,142,247,140,248,138,248,137,246,137,244,138,243,-1,-1,118,239,123,239,122,241,122,242,120,244,
/*1150 */ 118,244,117,242,117,240,118,239,-1,-1,137,158,139,158,141,160,141,162,139,164,137,164,135,162,135,160,137,158,-1,-1,122,151,124,151,126,153,126,155,123,157,121,157,120,155,120,153,122,151,888,888,7,345,280,347,277,347,274,888,888,
/*1160 */ 7,547,400,512,318,-1,-1,438,131,382,0,-1,-1,275,400,228,289,-1,-1,198,217,187,190,-1,-1,165,136,110,0,999,999,
/*1170 */ //PSET,
/*1180 */ 0,1,126,93,142,71,227,174,173,197,240,291,191,291,263,308,302,396,321,323,36,350,36,339,44,400,158,360,199,366,197,353,226,359,231,347,258,355,255,351,249,345,247,362,251,363,256,365,262,361,264,357,256,346,265,309,302,290,191,
/*1190 */ 347,274,359,276,369,274,377,264,377,259,384,261,389,260,385,268,370,279,361,282,345,280,406,189,404,196,403,204,402,209,400,218,400,223,404,227,401,246,443,153,446,159,451,164,454,167,457,173,459,178,414,177,422,180,427,183,438,
/*1200 */ 186,445,188,455,189,454,196,447,195,437,197,430,200,421,208,422,253,430,261,439,266,450,270,455,272,442,282,434,284,426,289,420,293,413,297,437,328,441,324,439,315,436,309,440,302,443,296,448,289,475,218,491,250,509,218.5,504,221,
/*1210 */ 513,221,512,215,513,215,514,202,525,199,531,191,540,197,547,200,544,207,544,209,538,244,530,241,512,244,485,281,491,285,538,255,555,260,567,234,554,235,557,296,561,302,544,136,528,137,525,96,529,81,522,103,515,114,498,136,506,129,
/*1220 */ 502,142,510,140,492,142,487,151,486,153,484,157,395,321,415,177,286,300,287,300,288,300,289,300,423,180,428,183,442,153,445,159,422,252,453,215,453,214,454,259,454,261,452,212,511,215,421,293,427,289,352,249,353,247,364,262,356,
/*1230 */ 201,351,222,92,142,70,227,290,263,559,302,560,302,421,209,421,211,554,260,553,260,532,191,512,318,438,131,228,289,198,217,187,190,188,191,999,999,
/*1240 */ //PAINT,
/*1250 */ 535,205,1,538,250,1,520,214,1,523,256,1,165,175,1,185,235,1,520,140,1,550,140,1,470,130,1,480,170,1,480,200,1,475,214,1,470,280,1,510,290,1,583,260,1,575,240,1,580,200,1,533,160,1,123,155,1,138,162,1,119,242,1,139,245,1,430,270,1,/*1260 */ 355,273,1,484,151,1,515,103,1,520,204,5,525,246,5,440,160,5,440,178,5,455,180,5,448,220,5,432,220,5,418,230,5,300,170,5,290,240,5,150,155,5,155,225,5,5,105,5,420,300,5,435,292,5,447,285,5,315,220,13,380,110,6,465,250,6,380,345,6,
/*1270 */ 250,170,6,250,270,6,60,115,6,50,240,6,530,195,6,525,197,6,360,111,7,357,20,7,345,44,7,475,230,7,380,320,7,250,200,7,250,235,7,50,135,7,50,215,7,515,222,7,507,222,7,315,299,13,325,295,13,539,200,6,535,244,1,540,193,7,548,203,7,540,
/*1280 */ 230,7,165,150,8,115,130,8,90,240,8,495,228,3,360,210,12,370,215,3,353,215,3,390,179,12,401,175,12,415,173,12,440,170,12,450,177,12,460,187,12,457,200,12,440,210,12,425,210,12,430,322,12,430,297,12,440,285,12,444,319,12,125,170,16,
/*1290 */ 130,230,16,457,270,12,410,193,3,408,207,3,403,221,3,407,232,3,340,225,4,325,245,4,410,160,17,410,315,17,470,95,9,480,142,9,480,154,9,483,155,9,510,110,9,570,120,8,505,135,8,515,99,9,515,121,9,545,127,8,557,146,8,540,150,12,500,
/*1300 */ 160,12,480,185,12,475,205,12,484,193,12,534,169,12,540,169,12,533,167,12,537,171,12,520,280,6,570,215,12,549,188,12,520,191,12,529,191,12,547,208,12,550,223,12,548,237,12,568,178,12,563,176,12,555,178,12,522,196,12,490,280,9,540,
/*1310 */ 260,9,520,310,10,470,300,10,575,275,10,583,182,10,535,298,10,503,298,10,507,298,10,532,281,12,550,250,11,575,285,11,360,255,12,359,245,12,374,262,5,374,274,5,362,262,12,360,252,12,357,250,12,349,245,12,354,249,12,356,251,12,349,
/*1320 */ 261,12,354,257,12,356,255,12,355,259,12,354,261,12,377,276,5,390,265,15,377,276,15,340,260,17,50,50,5,50,180,5,50,300,5,600,350,5,600,50,5,400,380,18,360,300,18,300,100,18,240,215,18,288,223,18,524,77,5,522,76,5,999,999,999,
/*1330 */ //仕上げ,
/*1340 */ 0,403,334,405,338,414,344,-1,-1,383,308,390,305,398,304,-1,-1,426,289,435,290,-1,-1,400,158,398,169,-1,-1,420,142,418,155,418,159,419,163,-1,-1,420,142,423,149,424,156,423,161,-1,-1,427,183,439,180,-1,-1,578,271,570,279,-1,-1,528,
/*1350 */ 198,533,194,-1,-1,532,198,535,196,-1,-1,534,261,537,264,-1,-1,530,262,531,264,534,267,888,888,7,524,256,521,256,-1,-1,521,213,518,213,777,777,

];





//-----------------------------------------------------------------------------
let rad = function( deg )
//-----------------------------------------------------------------------------
{
	return deg*Math.PI/180;
}

//-----------------------------------------------------------------------------
let circle = function( context, x,y,r )
//-----------------------------------------------------------------------------
{
	{
		context.beginPath();
		context.arc(x, y, r, 0, Math.PI * 2, true);
		context.closePath();
		context.stroke();
	}
}

let g_tblCol8 =
[

	0x000000,
	0x0000ff,
	0xff0000,
	0xff00ff,
	0x00ff00,
	0x00ffff,
	0xffff00,
	0xffffff,
]

const _0	= 0x000000;
const _1	= 0x0000ff;
const _2	= 0xff0000;
const _3	= 0xff00ff;
const _4	= 0x00ff00;
const _5	= 0x00ffff;
const _6	= 0xffff00;
const _7	= 0xffffff;
let g_tblTiling =
{
// HEXCHR$("884422") = BBRRGG
 0:[[[_0]]							,[_1,_2,_3,_4,_5,_6,_7] ],
 1:[[[_0]]							,[_0,_7] ],
 2:[[[_1]]							,[_0,_1,_4,_5] ],
 3:[[[_2]]							,[_0] ],
 4:[[[_3]]							,[_0] ],
 5:[[[_7]]							,[_0,_7] ],
 6:[[[_7,_6]		,[_6,_7]]		,[_0,_4,_7] ],
 7:[[[_7,_6,_7,_2]	,[_7,_2,_7,_6]]	,[_0,_6,_7] ],
 8:[[[_7,_2]		,[_2,_7]]		,[_0,_3,_6] ],
 9:[[[_3,_5]		,[_5,_3]]		,[_0,_4,_6] ],
10:[[[_3,_7,_3,_6]	,[_7,_2,_7,_3]]	,[_0,_3,_4,_5] ],
11:[[[_5,_7]		,[_7,_5]]		,[_0,_2,_3,_4,_5,_6] ],
12:[[[_2,_6]		,[_6,_2]]		,[_0,_2,_3,_4,_5,_6,_7] ],
13:[[[_2,_6,_2,_2]	,[_2,_2,_2,_6]]	,[_0] ],
14:[[[_1,_5]		,[_5,_1]]		,[_0,_4,_7] ],
15:[[[_1,_4,]		,[_4,_1]]		,[_0,_1] ],
16:[[[_6,_7,_6,_5]	,[_7,_4,_7,_6]]	,[_0] ],
17:[[[_6,_5]		,[_5,_6]]		,[_0,_2,_4,_5,_6,_7] ],
18:[[[_6,_4]		,[_4,_6]]		,[_0,_7] ],
};

let	g_stat = 0;
let g_idxData = 0;
let g_col = 0;
let g_sx;
let	g_sy;
//-----------------------------------------------------------------------------
function drawVector( gra )
//-----------------------------------------------------------------------------
{
	let	ex;
	let	ey;
	switch( g_stat )
	{

	//------------------------
	case 0: // line color
		g_col = g_tblCol8[ g_tblVect[g_idxData++] ]; 
		g_stat = 1;
		break;
	case 1: // line g_sx g_sy
		g_sx = g_tblVect[g_idxData++];	
		g_sy = g_tblVect[g_idxData++];	
		g_stat = 2
		break;
	case 2: // line ex ey 
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		if ( ex == 888 )	{g_stat = 0;     break;}	// end segment & color
		if ( ex == -1 )		{g_stat = 1;     break;} 	// end segment
		if ( ex == 999 )	{g_stat = 3;     break;}	// end segment & pset mode
		if ( ex == 777 )	{g_stat = 9;     break;}	// end 
		if ( ex == 666 )								// circle
		{
			gra.circle(217,213*g_sc,7.8,g_tblCol8[0], 2.1*g_sc );	 
			gra.circle(244,231*g_sc,7.8,g_tblCol8[0], 2.1*g_sc );	 
			break;
		}
	//	console.log(g_idxData+")", g_sx,g_sy,ex,ey,g_col);
		gra.line( g_sx,g_sy*g_sc,ex,ey*g_sc, g_col );
		g_sx=ex;
		g_sy=ey;
		break;

	//------------------------
	case 3: // pset
		g_col = g_tblCol8[ g_tblVect[g_idxData++] ]; 
		g_stat = 4;
		break;
	case 4: // pset put
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		if ( ex == -1 )				{g_stat = 3;     break;} 	// end segment & color
		if ( ex == 999 )			{g_stat = 5;     break;} 	// end segment & paint mode
		gra.pset( ex,ey*g_sc, g_col );//kozo
		break;

	//------------------------
	case 5: // PAINT
		if( g_flgSleep ) break;

		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		g_col = g_tblVect[g_idxData++]; 
		if ( ex == 999 )			
		{
			g_stat = 0;  
			//console.log("仕上げ");
			break;
		} 	// end segment & paint mode
		
		{
			let col = [[884400]];
			let rej = [0,0x00ff00,0xff0000,0xffffff];

			if ( g_tblTiling[g_col] != undefined )
			{
				col = g_tblTiling[g_col][0];
				rej = g_tblTiling[g_col][1];
			}
			if (1) gra.paint( ex,ey*g_sc, col,rej );else   {gra.circle(ex,ey*g_sc, 5,0xff0000,2,2);rot_paint( ex,ey*g_sc, col,[0xff0000] );}
		}
		break;

	//------------------------
/*
	case 6:	// 仕上げ ---
		g_col = g_tblVect[g_idxData++];
		g_stat = 7;
		break;	
	case 7:	// 仕上げ ---
		g_sx = g_tblVect[g_idxData++];	
		g_sy = g_tblVect[g_idxData++];	
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		gra.line( g_sx,g_sy*g_sc,ex,ey*g_sc, g_col );
		g_stat = 8;
		break;	
	case 8:	// 仕上げ ---
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		if ( ex == -1 )				{g_stat = 7;     break;}
		if ( ex == 999 )			{g_stat = 9;     break;}
		gra.line( g_sx,g_sy*g_sc,ex,ey*g_sc, g_col );
		g_sx=ex;
		g_sy=ey;
		break;	
*/
	}
}

//Key
const	KEY_CR	= 13;
const	KEY_0		= 48;
const	KEY_1		= 49;
const	KEY_2		= 50;
const	KEY_3		= 51;
const	KEY_4		= 52;
const	KEY_5		= 53;
const	KEY_6		= 54;
const	KEY_7		= 55;
const	KEY_8		= 56;
const	KEY_9		= 57;
const	KEY_A		= 65;
const	KEY_B		= 66;
const	KEY_C		= 67;
const	KEY_D		= 68;
const	KEY_E		= 69;
const	KEY_F		= 60;
const	KEY_I		= 73;
const	KEY_O		= 79;
const	KEY_Z		= 90;
const	KEY_X		= 88;
const	KEY_LEFT	= 37;
const	KEY_UP		= 38;
const	KEY_RIGHT	= 39;
const	KEY_DOWN	= 40;
let g_idxSample = 0;
let g_idxPal = 2;
//-----------------------------------------------------------------------------
window.onkeydown = function( ev )
//-----------------------------------------------------------------------------
{

	let	c = ev.keyCode;


}
//-----------------------------------------------------------------------------
function draw_image( img )
//-----------------------------------------------------------------------------
{
// 引き伸ばして表示
    let cv=document.createElement('canvas');				// 新たに<canvas>タグを生成
    cv.width=img.width;
    cv.height=img.height;
	cv.getContext("2d").putImageData(img,0,0);				// 作成したcanvasにImageDataをコピー
	{
		let sx = 0;
		let sy = 0;
		let sw = img.width;
		let sh = img.height;
		let dx = 0;
		let dy = 0;
		let dw = 640;
		let dh = 400;

		if ( flgRot90 )
		{
		    g_context.save();
		    g_context.rotate(-90 * Math.PI / 180);          	
			g_context.drawImage( cv,sx,sy,sw,sh,dx-640,dy,dw,dh);	// ImageDataは引き延ばせないけど、Imageは引き延ばせる
		    g_context.restore();
		}
		else
		{
			g_context.drawImage( cv,sx,sy,sw,sh,dx,dy+100,dw,dh);	// ImageDataは引き延ばせないけど、Imageは引き延ばせる

		}
	}
	
}
//-----------------------------------------------------------------------------
function print( tx, ty, str )
//-----------------------------------------------------------------------------
{
	g_context.font = "12px monospace";
	g_context.fillStyle = "#000000";
	g_context.fillStyle = "#FFFFFF";
	g_context.fillText( str, tx, ty );
}

//-----------------------------------------------------------------------------
window.onload = function()
//-----------------------------------------------------------------------------
{
	gra.window(0,0,639,199, 0,0,639,399);			
	gra.cls( 0x0000ff );			

	g_idxData = 0;
	g_stat = 0;
	
	gra.cls( 0x0000ff );			

//	gra.cls( 0x0000ff );			

//	gra.box( 0,0, 639, 199, _2 );
//	gra.paint( 100,10, [[_2]],[_2] );

	update();
}

//-----------------------------------------------------------------------------
function update()
//-----------------------------------------------------------------------------
{
	for ( let i = 0 ; i < 10 ; i ++ )
	{
		if ( g_idxData < g_tblVect.length && g_stat != 9 )
		{
			drawVector( gra );
		}
	}
	draw_image( gra.img );
	requestAnimationFrame( update );
}
