// 2020/11/24 タイリングペイントに対応
// 2020/12/20 WINDOW命令に対応
// 2020/12/22 gra をクラスに変更
// 2020/12/23 スキャンライン・シードペイントアルゴリズムに変更
// 2020/12/26 ステンシルバッファ判定に変更

'use strict';


let g_sc = 1.0;	//:1:200line 2:400line
let g_h = 200*g_sc;


//ゆっくり描画のための処理
let g_flgSleep = false;
const sleep = msec => new Promise(resolve => setTimeout(resolve, msec));
	
class GRA
{
	constructor( context, width, height )
	{
		this.img = context.createImageData( width, height );
		this.stencil = new Array( width*height );

		//-----------------------------------------------------------------------------
		this.window = function( x0,y0,x1,y1, x2,y2,x3,y3 )
		//-----------------------------------------------------------------------------
		{
			this.x0 = x0;
			this.y0 = y0;
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
			this.x3 = x3;
			this.y3 = y3;

			this.sw = (this.x1-this.x0+1)/(this.x3-this.x2+1);
			this.sh = (this.y1-this.y0+1)/(this.y3-this.y2+1);
		}

		this.window( 
			0,
			0,
			width-1,
			height-1,
			0,
			0,
			width-1,
			height-1
		);

		//-----------------------------------------------------------------------------
		this.window_conv = function( _ox, _oy )
		//-----------------------------------------------------------------------------
		{
			let ox = (_ox-this.x2)*this.sw;	// window対応
			let	oy = (_oy-this.y2)*this.sh;	// window対応
			switch(3)
			{
			case 0:
				ox=ox;
				oy=oy;
				break;
			case 1:
				ox=Math.floor(ox);
				oy=Math.floor(oy);
				break;
			case 2:
				ox=Math.ceil(ox);	// 400ドットで壁に達するにはこれなんだけど
				oy=Math.ceil(oy);
				break;
			case 3:
				ox=Math.round(ox);	// これでないと目瞼に塗り残しが出る。//kozo
				oy=Math.round(oy);
				break;
			}
			return [ox,oy];
		}
		//-----------------------------------------------------------------------------
		this.window_revconv = function( _ox, _oy )
		//-----------------------------------------------------------------------------
		{
			let ox = _ox/this.sw +this.x2;	// window対応
			let oy = _oy/this.sh +this.y2;	// window対応
//			ox=Math.round(ox);
//			oy=Math.round(oy);
			ox=Math.floor(ox);
			oy=Math.floor(oy);
			return [ox,oy];
		}



		//-----------------------------------------------------------------------------
		this.cls = function( col, a =0xff )
		//-----------------------------------------------------------------------------
		{
			for (let x=0; x<this.img.width ; x++ )
			for (let y=0; y<this.img.height ; y++ )
			{
				let adr = (y*this.img.width+x)*4;
				this.img.data[ adr +0 ] = (col>>16)&0xff;
				this.img.data[ adr +1 ] = (col>> 8)&0xff;
				this.img.data[ adr +2 ] = (col>> 0)&0xff;
				this.img.data[ adr +3 ] = a;
			}
		}
		//-----------------------------------------------------------------------------
		this.rgb = function( r,g,b )	// xRGB 8:8:8:8 
		//-----------------------------------------------------------------------------
		{
			return (r<<16)|(g<<8)|b;
		}
		//-----------------------------------------------------------------------------
		this.point = function( x, y )
		//-----------------------------------------------------------------------------
		{
			let adr = (y*this.img.width+x)*4;
			let r = this.img.data[ adr +0 ];
			let g = this.img.data[ adr +1 ];
			let b = this.img.data[ adr +2 ];
		//	let a = this.img.data[ adr +3 ];
			return this.rgb(r,g,b);
		}
		//-----------------------------------------------------------------------------
		this.pset0 = function( _ox, _oy, col, a=0xff )
		//-----------------------------------------------------------------------------
		{
//			let x = Math.floor(_ox);
//			let y = Math.floor(_oy);
			let x = (_ox);
			let y = (_oy);
			if ( x < 0 ) return;
			if ( y < 0 ) return;
			if ( x >= this.img.width ) return;
			if ( y >= this.img.height ) return;

			let adr = (y*this.img.width+x)*4;
			this.img.data[ adr +0 ] = (col>>16)&0xff;
			this.img.data[ adr +1 ] = (col>> 8)&0xff;
			this.img.data[ adr +2 ] = (col>> 0)&0xff;
			this.img.data[ adr +3 ] = a&0xff;
		}
		//-----------------------------------------------------------------------------
		this.pset = function( _px, _py, col )
		//-----------------------------------------------------------------------------
		{
			let [px,py] = this.window_conv( _px, _py );
			this.pset0( px, py, col );
		}

		//-----------------------------------------------------------------------------
		this.stencil_point = function( x, y )
		//-----------------------------------------------------------------------------
		{
			let adr = (y*this.img.width+x);
			let r = this.stencil[ adr ];
			return r;
		}
		//-----------------------------------------------------------------------------
		this.stencil_pset = function( x, y, a )
		//-----------------------------------------------------------------------------
		{
			let adr = (y*this.img.width+x);
			this.stencil[ adr ] = a;
		}

		//-----------------------------------------------------------------------------
		this.line = function( _x1, _y1, _x2, _y2, col, tile=0xffff ) 
		//-----------------------------------------------------------------------------
		{
			let [x1,y1] = this.window_conv( _x1, _y1 );
			let [x2,y2] = this.window_conv( _x2, _y2 );

			let cnt = 0;

			//ブレセンハムの線分発生アルゴリズム

			// 二点間の距離
			let dx = ( x2 > x1 ) ? x2 - x1 : x1 - x2;
			let dy = ( y2 > y1 ) ? y2 - y1 : y1 - y2;

			// 二点の方向
			let sx = ( x2 > x1 ) ? 1 : -1;
			let sy = ( y2 > y1 ) ? 1 : -1;

			if ( dx > dy ) 
			{
				// 傾きが1より小さい場合
				let E = -dx;
				for ( let i = 0 ; i <= dx ; i++ ) 
				{
					if( ((1<<(cnt %16)) & tile ) != 0 ) this.pset0( x1,y1, col );
					x1 += sx;
					E += 2 * dy;
					if ( E >= 0 ) 
					{
						y1 += sy;
						E -= 2 * dx;
					}
					cnt++;
				}
			}
			else
			{
				// 傾きが1以上の場合
				let E = -dy;
				for ( let i = 0 ; i <= dy ; i++ )
				{
					if( ((1<<(cnt %16)) & tile ) != 0 ) this.pset0( x1,y1, col );
					y1 += sy;
					E += 2 * dx;
					if ( E >= 0 )
					{
						x1 += sx;
						E -= 2 * dy;
					}
					cnt++;
				}
			}

		}
		//-----------------------------------------------------------------------------
		this.box = function( x1,y1, x2,y2, col )
		//-----------------------------------------------------------------------------
		{

			this.line( x1,y1,x2,y1, col);
			this.line( x1,y2,x2,y2, col);
			this.line( x1,y1,x1,y2, col);
			this.line( x2,y1,x2,y2, col);
		}

		//-----------------------------------------------------------------------------
		this.circle = function( x,y,r,col, scy=1 )
		//-----------------------------------------------------------------------------
		{
			const scx=2;

			let rad = function( deg )
			//-----------------------------------------------------------------------------
			{
				return deg*Math.PI/180;
			}
			{
				let st = rad(1);
				let x0,y0;
				for (  let i = 0 ; i <= Math.PI*2 ; i+=st  )
				{
					let x1 = r * Math.cos(i)*scx + x;
					let y1 = r * Math.sin(i)*scy + y;

					if ( i > 0 ) this.line( x0, y0, x1, y1, col );
					x0 = x1;
					y0 = y1;
				}
			}
		}

		//-----------------------------------------------------------------------------
		this.paint = async function(  _x0, _y0, colsPat, colsRej  ) 
		//-----------------------------------------------------------------------------
		{
		//	呼び出しサンプル
		//	gra.circle(100,100, 20,0xff0000);
		//	gra.paint( 100,100, [[0xffff00]],[0xff0000] );


			let [x0,y0] = this.window_conv( _x0, _y0 );
			let cntlines = 0;

			{
				let c = this.point(x0,y0);
				if ( colsRej.indexOf(c) != -1 ) return cntlines;
			}

			this.stencil.fill(0);

			let seed=[];
			seed.push([x0,y0,0,0,0]); // x,y,dir,lx,rx
			while( seed.length > 0 )
			{
				// 先頭のシードを取り出す
				let sx	= seed[0][0];
				let sy	= seed[0][1];
				let pdi	= seed[0][2];
				let plx	= seed[0][3];
				let prx	= seed[0][4];
				seed.shift();

				// シードから左端を探す
				let lx=sx;
				while( lx >= 0 )
				{
					let c = this.point(lx,sy);
					if ( colsRej.indexOf(c) != -1 ) break;
					let s = this.stencil_point(lx,sy);
					if ( s != 0 ) break;
					lx--;
				}
				lx++;

				// シードから右端探す
				let rx=sx;
				while( rx < this.img.width )
				{
					let c = this.point(rx,sy);
					if ( colsRej.indexOf(c) != -1 ) break;
					let s = this.stencil_point(rx,sy);
					if ( s != 0 ) break;
					rx++;
				}
				rx--;

				// 1ライン塗り
				{
					let iy = Math.floor( sy % colsPat.length );
					let ay = sy*this.img.width;
					for ( let x = lx ; x <=rx ; x++ )
					{
						let ix = Math.floor(  x % colsPat[0].length );
						let col = colsPat[iy][ix];
						let adr = (ay+x);
						this.img.data[ adr*4 +0 ] = (col>>16)&0xff;
						this.img.data[ adr*4 +1 ] = (col>> 8)&0xff;
						this.img.data[ adr*4 +2 ] = (col>> 0)&0xff;
						this.img.data[ adr*4 +3 ] = 0xff;
					
						this.stencil[ adr ] = 1;
					}
					
					if ( cntlines %(3) == 1 )
					{
						g_flgSleep = true;
						await sleep(1); // 1msecスリープ
						g_flgSleep = false;
					}
					cntlines++;
				}

				if ( seed.length > 50 ) 
				{
					console.log("Out of seed sampling painted at", _x0, _y0, colsPat, colsRej );

					break;
				}
				for( let dir of [-1,1] )
				{// 一ライン上（下）のライン内でのペイント領域の右端をすべてシードに加える
					let y=sy+dir;
					if ( dir ==-1 && y < 0 ) continue;
					if ( dir == 1 && y >= this.img.height ) continue;
					let flgBegin = false;
					for ( let x = lx ; x <=rx ; x++ )
					{
						let c = this.point(x,y);
						let s = this.stencil_point(x,y);
						if ( flgBegin == false )
						{
							if ( s == 0 && colsRej.indexOf(c) == -1 )
							{
								flgBegin = true;
							}
						}
						else
						{
							if ( s == 0 && colsRej.indexOf(c) == -1 )
							{}
							else
							{
								seed.push([x-1,y,dir,lx,rx]);
								flgBegin = false;
							}
						}
					}
					if ( flgBegin == true )
					{
								seed.push([rx,y,dir,lx,rx]);
					}
				}
			}
			
			return cntlines;
		}
	}

};

let g_context = html_canvas.getContext('2d');
g_context.imageSmoothingEnabled = g_context.msImageSmoothingEnabled = 0; // スムージングOFF
let gra = new GRA( g_context, 640, g_h );

let g_tblVect = 
[
/*320*/ //右目
/*330*/  0,
/*340*/ 86,109, 87,114, 89,118, 91,121, 93,123 ,94,124, 97,122,100,121,
/*350*/101,118,101,116, 99,110, 96,105, 94,103 ,90,101, 87,101, 85,103,
/*360*/ 85,105, 86,109,  0,  0,
/*370*/ //左目 ,
/*380*/118, 95,119, 96,119,101,121,107,124,113,127,116,130,116,137,114,
/*390*/138,113,139,111,140,107,140,103,139, 99,136, 95,133, 92,129, 90,
/*400*/127, 90,122, 92,120, 93,118, 95,  0,  0,
/*410*/ //鼻,口,
/*420*/103,121,102,123,103,126,104,130,105,130,103,126,  0,  0,
/*430*/104,135,106,138,109,141,112,141,116,138,118,135,115,133,108,133,
/*440*/104,135,  0,  0,
/*450*/ //顔首耳
/*460*/ 79, 88, 77, 93, 76, 97, 76,105, 78,112, 83,117, 86,121, 89,130,
/*470*/ 92,140, 93,142, 95,145, 99,148,105,151,110,153,113,153,119,151,
/*480*/125,149,127,148,  0,  0,134,144,139,141,143,137,  0,  0,
/*490*/ 83, 79, 81, 81, 79, 85, 79, 88, 80, 91, 81, 87, 83, 85, 83,90,
/*500*/ 85, 95, 89, 98, 95,100, 97,100, 94, 97, 92, 93, 92, 90, 93,86,
/*510*/ 94, 84,  0,  0,
/*520*/ 94, 77, 94, 82, 96, 87, 98, 89,102, 91,104, 91,101, 88,100, 85,
/*530*/104, 88,128, 86,133, 89,138, 93,143, 98,146,103,148,110,148,113,
/*550*/  0,  0,
/*560*/144,136,145,135,  0,  0,
/*570*/140,140,141,148,144,157,  0,  0,
/*580*/152,107,154,107,155,112,156,116,156,119,154,122,  0,  0,
/*590*/ 84,123, 85,126, 88,129,  0,  0,
/*600*/ // 髪
/*610*/ 70,110, 72,114, 75,118, 79,121, 87,124,  0,  0,
/*620*/ 75,118, 70,116, 66,113, 63,109, 61,105, 60,101, 60, 98, 61, 91,
/*630*/ 63, 85, 60, 89, 58, 95, 58,100, 57, 95, 57, 91, 58, 86, 61, 81,
/*640*/ 64, 77, 60, 80, 58, 82, 60, 79, 63, 75, 67, 71, 71, 68, 75, 66,
/*650*/ 79, 64, 75, 62, 73, 62, 68, 64, 64, 66, 66, 63, 69, 60, 74, 58,
/*660*/ 78, 58, 84, 60, 88, 62, 86, 57, 86, 53, 88, 48, 92, 44, 90, 48,
/*670*/ 89, 51, 89, 54, 91, 59, 93, 61,  0,  0,
/*680*/ 85, 60, 87, 59,  0,  0,
/*690*/ 90, 56, 95, 53,101, 50,110, 47,120, 45,130, 47,138, 49,145, 52,
/*700*/156, 57,170, 65,179, 69,188, 72,198, 74,203, 74,211, 72,217, 70,
/*710*/226, 68,232, 68,239, 70,229, 70,221, 72,217, 74,230, 72,235, 72,
/*720*/245, 74,255, 77,264, 81,269, 84,272, 87,  0,  0,
/*730*/292,110,294,117,294,122,293,127,291,133,289,137,286,141,  0,  0,
/*740*/281,143,286,141,295,139,307,139,315,141,319,143,323,146,328,148,
/*750*/333,151,338,155,343,160,346,165,348,170,348,172,346,174,344,174,
/*760*/343,172,  0,  0,
/*770*/323,146,316,144,311,143,306,143,295,145,310,147,316,149,322,152,
/*780*/327,156,330,159,  0,  0,
/*790*/324,154,317,151,306,149,299,149,290,151,283,153,276,156,285,156,
/*800*/295,158,300,160,304,163,308,167,311,172,305,167,300,164,292,162,
/*810*/285,162,275,164,268,167,  0,  0,
/*820*/275,164,285,164,295,166,300,168,303,170,304,173,304,176,303,178,
/*830*/  0,  0,
/*840*/ 92, 60, 96, 57,101, 54, 98, 58, 97, 60,102, 57,111, 54,116, 54,
/*850*/123, 56,129, 59,143, 69,148, 74,152, 79,155, 84,156, 88,156, 94,
/*860*/154,102,150,115,151,118,152,120,154,122,157,124,164,126,169,126,
/*870*/180,124,185,124,194,126,198,128,201,131,202,133,  0  ,0,
/*880*/188,130,193,130,200,132,202,133,204,135,206,140,  0,  0,
/*890*/192,132,199,135,206,140,210,143,213,146,215,150,217,156,217,160,
/*900*/216,166,212,171,210,174,206,177,202,179,200,180,202,179,205,177,
/*910*/207,175,209,171,210,166,210,160,207,158,208,162,208,166,207,170,
/*920*/204,173,204,166,202,160,199,155,195,152,197,156,197,160,196,163,
/*930*/194,165,196,163,195,159,192,155,189,153,182,151,163,149,157,147,
/*940*/152,144,148,140,145,135,144,130,144,125,142,129,142,132,144,138,
/*950*/142,136,140,133,139,130,139,127,140,123,142,119,145,116,148,113,
/*960*/151,112,  0,  0,
/*970*/ 65,112, 60,114, 51,116, 37,119, 31,121, 26,123, 21,126, 17,129,
/*980*/ 14,132, 11,136,  8,142,  7,149, 10,144, 14,139, 17,136, 22,133,
/*990*/ 27,132, 30,132, 24,136, 19,140, 14,145, 10,150,  7,155,  5,160,
/*1000*/  4,165,  4,169,  5,174,  8,165, 10,162, 13,159, 17,159, 15,160,
/*1010*/ 13,165, 12,170, 12,176, 13,182, 15,186, 18,190, 22,193, 27,195,
/*1020*/ 39,197, 47,197, 67,195, 74,195,  0,  0,
/*1030*/ 75,118, 74,120, 72,122, 68,124, 56,129, 51,132, 45,136, 40,140,
/*1040*/ 36,145, 33,150, 30,157, 33,154, 36,152, 33,158, 32,163, 32,169,
/*1050*/ 33,174, 36,179, 39,182, 38,177, 38,173, 39,169, 41,175, 44,179,
/*1060*/ 48,182, 52,184, 58,186, 70,188, 76,188,  0,  0,
/*1070*/ 89,130, 87,132, 82,135, 71,140, 62,145, 57,149, 54,152, 51,157,
/*1080*/ 49,162, 49,166, 51,169, 54,172,  0,  0,
/*1090*/ 53,164, 53,168, 54,172, 55,175, 59,177, 64,179, 72,179, 80,181,
/*1100*/  0,  0,
/*1110*/ 84,134, 84,136, 82,138, 74,143, 70,146, 67,150, 64,155, 63,160,
/*1120*/ 64,162, 66,160, 68,163, 72,167, 77,170, 81,170, 84,168, 88,167,
/*1130*/  0,  0,
/*1140*/ 81,164, 83,164, 88,167, 90,170, 91,172,  0,  0,
/*1150*/ 86,171, 88,172, 88,174,  0,  0,
/*1160*/148,113,147,119,147,124,148,129,150,133,152,135,152,127,155,131,
/*1170*/158,133,164,135,183,137,188,139,194,143,193,140,200,144,205,149,
/*1180*/208,154,210,160,  0,  0,
/*1190*/210,160,212,165,212,171,  0,  0,
/*1200*/ 75,109, 73,106, 71,103, 70,100, 70, 95, 71, 90, 73, 94, 74, 88,
/*1210*/ 77, 82, 81, 77, 85, 73, 87, 71, 87, 70, 85, 68, 82, 68, 76, 71,
/*1220*/ 72, 74, 68, 79, 65, 85, 64, 89, 67, 87, 66, 91, 65, 96, 66,100,
/*1230*/ 68,104, 71,107, 75,109,  0,  0,
/*1240*/150,108,151,104,152, 97,152, 91,151, 86,147, 78,146, 85,144, 80,
/*1250*/141, 75,136, 69,137, 74,137, 78,135, 73,132, 68,128, 64,124, 61,
/*1260*/126, 65,127, 67,123, 64,117, 61,111, 59,109, 59,106, 61,106, 64,
/*1270*/107, 68,110, 73,114, 76,120, 79,129, 83,137, 87,133, 84,131, 81,
/*1280*/129, 77,134, 80,138, 84,142, 89,146, 95,148,101,150,108,  0,  0,
/*1290*/101, 54,107, 52,116, 50,126, 50,136, 52,144, 55,151, 59,160, 65,
/*1300*/168, 70,177, 75,185, 78,200, 82,187, 84,183, 85,180, 87,179, 89,
/*1310*/179, 91,181, 93,191, 95,210, 95,222, 93,230, 91,231, 89,230, 87,
/*1320*/225, 85,215, 83,212, 83,211, 82,217, 80,224, 80,237, 82,245, 84,
/*1330*/250, 86,243, 86,235, 88,241, 88,247, 90,254, 94,259, 98,  0,  0,
/*1340*/272,139,276,137,279,134,283,130,284,125,284,121,  0,  0,
/*1350*/272,147,280,145,285,145,279,148,276,150,272,154,  0,  0,
/*1360*///角
/*1370*/131, 60,136, 57,138, 57,140, 60,141, 68,  0,  0,
/*1380*///耳飾り
/*1390*/ 89,143, 92,145, 94,149, 94,152, 92,156, 89,158, 86,158, 82,155,
/*1400*/ 81,151, 81,149, 83,145, 86,143, 89,143,  0,  0,
/*1410*/150,142,148,144,147,147,147,149,148,151,151,153,156,153,159,151,
/*1420*/160,148,  0,  0,
/*1430*///マフラー
/*1440*/141,148,147,149,  0,  0,
/*1450*/155,157,154,159,152,159,144,157,132,155,113,153,110,153,101,155,
/*1460*/ 98,157, 97,162, 98,164,101,166,116,168,125,168,137,170,149,170,
/*1470*/155,168,158,166,161,163,163,159,164,155,162,153,159,151,  0,  0,
/*1480*/ 97,162, 93,164, 93,166, 94,172, 95,172, 99,174,102,174,107,177,
/*1490*/113,181,116,183,123,186,131,188,135,188,144,186,146,187,154,189,
/*1500*/158,189,162,187,165,183,168,180,169,167,168,165,162,162,  0,  0,
/*1510*///左手
/*1520*/166,164,169,160,172,157,177,155,182,155,189,153,  0,  0,
/*1530*/210,143,213,141,218,139,220,136,224,131,225,127,227,123,231,120,
/*1540*/233,120,235,116,239,113,241,113,242,115,244,110,248,106,251,106,
/*1550*/252,107,259, 98,263, 96,262, 99,261,103,261,107,262,112,264,117,
/*1560*/267,123,271,127,275,129,277,129,280,127,279,130,275,134,272,139,
/*1570*/273,143,272,147,272,154,271,162,268,167,263,173,258,176,241,182,
/*1580*/  0,  0,
/*1590*/241,179,240,184,237,188,224,196,216,199,215,200,190,212,188,212,
/*1600*/  0,  0,
/*1610*/263, 96,272, 87,297, 61,298, 58,299, 55,301, 51,299, 45,299, 40,
/*1620*/301, 35,303, 33,307, 31,309, 27,309, 24,312, 27,313, 31,340, 30,
/*1630*/340, 33,338, 38,331, 50,328, 57,327, 62,322, 69,321, 73,318, 77,
/*1640*/314, 80,292,110,284,121,280,127,  0,  0,
/*1650*/297, 61,299, 64,300, 69,303, 74,307, 77,314, 80,  0,  0,
/*1660*/303, 33,303, 28,302, 21,300, 17,300, 13,301, 13,307, 20,309, 24,
/*1670*/  0,  0,
/*1680*/313, 20,313, 15,314, 14,313, 15,312, 16,307, 14,306, 12,307, 10,
/*1690*/314, 10,319,  8,320, 10,320, 17,  0,  0,
/*1700*/323, 23,318, 25,316, 25,317, 22,320, 17,325, 12,327, 12,328, 17,
/*1710*/326, 21,323, 23,  0,  0,
/*1720*/328, 17,333, 12,335, 12,335, 17,334, 20,326, 25,324, 25,323, 23,
/*1730*/  0,  0,
/*1740*/337, 20,339, 11,342,  6,345,  3,348,  4,346,  6,344, 10,343, 15,
/*1750*/343, 20,  0,  0,
/*1760*/171,185,174,191,178,197,183,202,186,206,188,210,189,214,188,219,
/*1770*/187,221,  0,  0,
/*1780*///マイク
/*1790*/299, 32,293, 34,288, 34,283, 32,281, 30,280, 28,280, 24,282, 21,
/*1800*/287, 18,293, 18,299, 20,298, 24,298, 28,299, 32,  0,  0,
/*1810*/299, 20,301, 20,  0,  0,299, 32,303, 32,  0,  0,
/*1820*/307, 20,318, 20,  0,  0,340, 30,354, 30,356, 28,356, 25,  0,  0,
/*1830*/334, 20,354, 20,357, 22,  0,  0,
/*1840*/353, 20,351, 23,351, 25,352, 28,354, 30,  0,  0,
/*1850*/356, 22,361, 22,371, 24,377, 27,382, 32,387, 40,392, 52,394, 68,
/*1860*/394, 82,391,100,387,115,379,135,372,147,363,160,352,174,335,194,
/*1870*/322,208,306,223,290,238,282,244,273,249,  0,  0,
/*1880*/356, 25,368, 26,375, 29,380, 34,385, 41,389, 51,391, 65,391, 84,
/*1890*/388,101,384,115,376,134,369,147,360,160,350,172,334,191,321,205,
/*1900*/305,220,288,235,280,241,270,247,  0,  0,356, 22,356, 25,  0,  0,
/*1910*///胸、肩
/*1920*/ 94,172, 91,172, 88,174, 83,177, 80,181, 76,188, 74,195, 74,199,
/*1930*/ 75,202, 81,197, 85,194, 89,192, 90,190,105,190,114,192,119,194,
/*1940*/126,198,133,203,141,206,150,208,152,208,156,205,160,200,163,193,
/*1950*/165,183,  0,  0,
/*1960*/ 99,174,103,178,109,182,114,187,117,191,119,194,  0,  0,
/*1970*/116,183,121,189,125,195,126,198,  0,  0,
/*1980*/106,180,108,178,  0,  0,111,180,112,185,  0,  0,
/*1990*/116,183,117,191,  0,  0,121,189,121,195,  0,  0,
/*2010*/ 74,199, 72,203, 69,205, 71,210, 74,216, 74,222,75,229, 77,236,
/*2000*/ //右手
/*2020*/ 80,243, 84,250,  0,  0,
/*2030*/ 96,234, 98,239,101,244,106,250,  0,  0,
/*2040*/157,221,162,221,165,223,  0,  0,
/*2050*/164,224,168,221,174,221,176,223,  0,  0,
/*2060*/175,225,176,223,178,221,183,219,185,219,188,222,195,222,196,223,
/*2070*/199,223,196,230,196,235,197,240,201,245,192,250,  0,  0,
/*2080*/199,223,203,220,207,220,212,218,216,218,223,221,236,230,241,232,
/*2090*/248,235,249,237,258,241,266,244,270,247,274,250,  0,  0,
/*2100*/201,245,204,245,206,247,208,247,210,245,215,250,  0,  0,
/*2110*/258,241,256,243,256,245,257,248,248,248,246,250,  0,  0,
/*2120*/196,223,190,225,189,228,188,235,188,243,189,250,  0,  0,
/*2130*///背景
/*2140*/ 18,228, 44,220, 63,199, 36,207, 18,228,  0,  0,
/*2150*/  7, 18, 18, 50, 45, 73, 35 ,43,  7, 18,  0,  0,
/*2160*/ 85,  0, 74,  7,102, 11,120,  0,  0,  0,
/*2170*/135, 43,162, 20,192, 12,165, 36,135, 43,  0,  0,
/*2180*/240, 45,266, 47,288, 62,265, 60,240, 45,  0,  0,
/*2190*/317,114,335,104,350, 83,331, 93,317,114,  0,  0,
/*2200*/360,  0,370, 17,392, 27,380,  7,364,  0,  0,  0,
/*2210*/327,227,350,211,383,206,363,221,327,227,  0,  0,
/*2220*/240,211,273,203,295,183,265,196,240,211,  0,  0,
/*2230*/372,141,364,126,375,135,  0,  0,378,137,390,147,400+1,167,  0,  0,	// +1補正
/*2240*/374,144,384,163,400+1,177,  0,  0,999,999,							// +1補正
/*2250*/
/*2260*/ //	ペイントデータ
/*2270*/
/*2280*/"FFEEFFFFBBFF",	 30, 50, 50,207,100,  5,160, 30,260, 50,330,100,	// 背景ひし形
/*2290*/				270,200,370, 10,380,150,350,220,370,133,  0,  0,
/*2300*/"5555FFAAAAFF",	200, 90,100, 70, 50,120, 60,160,180,130,185,130,	// 髪明るい
/*2310*/				285,130,290,145,  0,  0,
/*2320*/"00FFFF",		136,60,120,160,200,190,  0,  0,						// 服、角
/*2330*/"AAFFAA55FF55",	110,120,90,185,140,190,190,240,300,80,144,134,		// 肌陰
/*2340*/				 0,  0,
/*2350*/"FFFF00",		90,150,150,150,130,180,  0,  0,						// ピアス、マフラー
/*2360*/"00FFAA00FF55",	275,246,290, 25,390,100,  0,  0,					// マイク頭、ケーブル
/*2370*/"FF0000",		320, 50,230,240,  0,  0,							// 手袋
/*2380*/"FF00FF",		 90,110,130,100,  0,  0,							// アイシャドウ
/*2390*/"EEFFEEBBFFBB",	260,245,305, 20,315, 12,324, 18,330, 20,340, 15,	// 指
/*2400*/				  0,  0,
/*2410*/"000000",		115,185,122,195,  0,  0,							// 肩ひも
/*2420*/"00AA00005500",	110,181,  0,  0,									// 肩ひも
/*2430*/"FFFFFF",		290,200,200, 50,350,100,104,177,119,190,205,248,	//肩ひも、背景奥
/*2440*/				350,200,354, 24,  0,  0,
/*2450*/"FFEEFFFFBBFF",	300, 25,340, 25,  0,  0,							// マイク本体
/*2460*/"00FF00",		110,135,888,888,									// 口の中
//"FF0000",	30, 50,888,888,		// kozo
/*2470*/
/*2480*/ //ラインデータ
/*2490*/
/*2500*///目
/*2510*/  0,
/*2520*/ 97,108, 96,108, 94,111, 94,114, 95,119, 97,122,  0,  0,
/*2530*/ 86,109, 87,105, 89,103, 90,103, 95,106, 99,110,  0,  0,
/*2540*/ 87, 95, 91, 95, 94, 97, 95, 97, 94, 95, 91, 94, 87, 95,  0,  0,
/*2550*/131,115,129,109,129,104,130,102,132,100,133,100,136,103,137,107,
/*2560*/137,110,136,114,  0,  0,
/*2570*/119, 98,122, 95,125, 93,129, 93,133, 95,138, 99,140,103,  0,  0,
/*2580*/109, 92,110, 92,114, 89,117, 87,119, 87,117, 87,112, 89,109, 92,
/*2590*/  0,  0,
/*2600*/ //鼻、口
/*2610*/102,123,105,123,108,125,107,127,105,130,  0,  0,
/*2620*/108,140,112,138,116,138,  0,  0,
/*2630*///顔
/*2640*/ 97,100, 98,100, 96, 95, 96, 92 ,97, 89,  0,  0,
/*2650*/111, 92,111, 94,112, 97,115, 97,118, 95,119, 96,119, 98,  0,  0,
/*2660*/134,115,136,122,136,127,134,133,131,138,127,143,122,147,117,150,
/*2670*/108,152,  0,  0,
/*2680*///髪
/*2690*/ 88,134, 88,136, 86,139, 80,147, 78,151, 78,155, 79,158, 80,160,
/*2700*/ 83,162, 86,162, 89,160, 90,158, 91,160, 91,162, 89,165, 87,166,
/*2710*/  0,  0,
/*2720*/90,139,89,141,89,143,  0,  0,
/*2730*///マフラー
/*2740*/100,156,100,159,101,162,104,164,113,166,121,166,133,164,137,162,
/*2750*/137,160,133,157,129,155,  0,  0,
/*2760*/142,168,148,168,158,166,  0,  0,
/*2770*/114,168,117,170,127,170,135,172,137,173,137,175,132,175,128,173,
/*2780*/125,173,124,174,124,175,127,176,  0,  0,
/*2790*/126,174,126,175,130,177,135,177,147,175,155,172,160,169,163,166,
/*2800*/  0,  0,
/*2810*/164,165,165,167,165,170,  0,  0,
/*2820*/144,186,154,183,159,181,162,179,  0,  0,
/*2830*/99,165,97,167,97,169,101,172,108,176,114,180,123,183,132,184,
/*2840*/138,184,150,181,158,178,160,176,160,174,156,172,155,172,  0,  0,
/*2850*///服（左袖口)
/*2860*/171,185,171,182,172,177,175,171,178,167,180,167,179,171,177,176,
/*2870*/177,179,178,181,180,181,182,179,184,175,185,175,184,180,182,186,
/*2880*/182,190,183,193,186,195,190,195,196,191,201,187,204,183,205,180,
/*2890*/205,178,  0,  0,
/*2900*/183,155,185,157,185,160,188,158,191,158,193,160,193,164,192,167,
/*2910*/196,165,199,165,201,167,202,171,202,175,201,179,  0,  0,
/*2920*/217,161,219,165,219,169,218,173,222,170,225,166,225,158,224,150,
/*2930*/223,142,223,139,224,135,226,135,229,140,231,148,232,158,232,170,
/*2940*/233,173,235,175,237,175,238,172,239,166,239,162,235,146,233,134,
/*2950*/232,125,233,120,  0,  0,
/*2960*/258,131,261,128,266,122,  0,  0,
/*2970*/237,115,236,121,236,129,237,136,240,143,244,147,249,150,252,150,
/*2980*/254,148,254,146,251,142,247,135,244,127,242,119,242,115,  0,  0,
/*2990*/244,126,247,128,250,132,255,139,258,142,262,144,264,144,266,142,
/*3000*/267,137,261,135,258,132,255,129,253,122,252,115,252,109,  0,  0,
/*3010*/182,219,185,216,187,211,187,209,  0,  0,
/*3020*///服（右袖)
/*3030*/138,207,144,210,151,212,154,214,156,217,157,221,  0,  0,
/*3040*/119,205,109,200,103,198, 99,198, 99,200,101,202,112,205,122,205,
/*3050*/133,207,141,210,147,213,149,216,149,218,148,220,  0,  0,
/*3060*/133,207,137,207,  0,  0,
/*3070*/ 75,202, 73,204, 73,206, 76,206, 80,204, 82,204, 84,208, 87,213,
/*3080*/ 90,216, 95,218,105,220,115,220,125,222,129,223,  0,  0,
/*3090*/155,222,148,220,143,220,134,222,125,225,117,228,116,231,116,233,
/*3100*/119,235,123,235,133,231,144,226,150,224,152,224,150,229,146,235,
/*3110*/144,240,144,242,145,244,147,244,151,238,154,232,158,227,161,225,
/*3120*/162,225,160,229,157,236,155,244,155,250,  0,  0,
/*3130*/158,250,160,243,165,234,172,227,174,227,172,232,170,240,170,243,
/*3140*/171,245,173,245,176,237,180,230,181,230,181,236,183,238,185,238,
/*3150*/188,235,189,237,192,237,196,235,  0,  0,
/*3160*/151,224,157,221,  0,  0,
/*3170*///左手
/*3180*/267,122,281,110,291, 99,308, 78,  0,  0,
/*3190*/313, 31,316, 37,317, 41,319, 41,321, 38,324, 38,325, 41,325, 45,
/*3200*/324, 52,321, 60,318, 65,315, 67,312, 67,309, 65,307, 65,307, 68,
/*3210*/310, 70,311, 72,309, 78,  0,  0,
/*3220*/317, 41,314, 46,312, 52,312, 54,314, 57,  0,  0,
/*3230*/303, 54,303, 57,305, 60,309, 62,313, 63,316 ,61,314, 61,309, 59,
/*3240*/306, 57,304, 54,303, 54,  0,  0,
/*3250*///右手
/*3260*/198-1,239,200,239,201,237,201,233,203,233,205,236,205,232,207,227, // -1補正
/*3270*/210,225,211,225,211,227,209,232,209,236,211,241,216,246,221,250,
/*3280*/  0,  0,
/*3290*/237,250,239,248,243,248,247,246,249,243,251,243,255,245,256,245,
/*3300*/  0,  0,
/*3310*///胸肩
/*3320*/ 78,185, 78,189, 79,194, 80,197,  0,  0,
/*3330*/140,205,138,199,135,195,140,197,144,200,148,204,150,208,  0,  0,
/*3340*///マイク
/*3350*/299, 22,302, 22,  0,  0,298, 28,303,28,  0,  0,
/*3360*/308, 22,317, 22,  0,  0,331, 22,351,22,  0,  0,
/*3370*/312, 27,351, 26,  0,  0,
/*3380*/999,999,
/*3390*/
/*3400*/ //ペイントデータ
/*3410*/
/*3420*/"FFFFFF",		110,136,300, 25,312, 25,340, 24,  0,  0,	// マイクハイライト、口の中
/*3430*/"FF0055FF00AA",	  97,115,135,110,  0,  0,	// 黒目部
/*3440*/"FF0000",	 	 90,110,125,100,  0,  0,		// 白目部
/*3450*/"AAFFAA55FF55",	153,115, 86,125,  0,  0,		// 耳
/*3460*/"EEFFFFBBFFFF",	170,200,220,150,240,130,250,120,170,225,100,210,	// 服ハイライト
/*3470*/				140,225,120,160,  0,  0,
/*3480*/"EEFFEEBBFFBB",	110,110,192,230,280, 90,100,185,150,195,  0,  0,		// 肌ハイライト
/*3490*/"FFFF55FFFFAA",	120,175,  0,  0,		//マフラーハイライト
/*3500*/"FF5555FFAAAA",	220,230,310, 50,888,888,	// 手袋ハイライト
/*3510*/
/*3520*/ //ライン、ペイントデータ
/*3530*/
/*3540*///目
/*3550*/  0,
/*3560*/119,101,123, 96,126, 94,128, 94,132, 96,137,100,140,103,  0,  0,
/*3570*/ 86,109, 88,105, 89,104, 90,104, 95,106,  0,  0,
/*3580*///口
/*3590*/105,136,109,136,112,133,  0,  0,999,999,
/*3600*/"FFFFFF",	 	 90,110,125,100,  0,  0,	// 白目部
/*3610*/"AAFF5555FFAA",	113,135,999,999,		// 口の中
/*3620*/
/*3630*/ //ライン 再処理 タイリングライン
/*3640*/
/*3650*///目
/*3660*/"FFFF",5,
/*3670*/ 99,110, 96,105,  0,  0, 85,103, 85,105, 86,109,  0,  0,
/*3680*/140,103,139, 99,888,888,
/*3690*/"FFFF",0,
/*3700*/ 82,101, 85,103,  0,  0, 82,105, 85,105,  0,  0,
/*3710*/ 82,109, 86,109, 86,110, 84,112,  0,  0, 91,124, 93,123,  0,  0,
/*3720*/132, 94,135, 92,  0,  0,134, 96,138, 93,  0,  0,
/*3730*/137,98,140, 96,  0,  0,139,100,142,100,888,888,
/*3740*/"FFFF",7,
/*3750*/ 93,123,91,121,89,118,87,114,86,110,  0,  0,
/*3760*/119,101,121,107,124,113,127,116,  0,  0,
/*3770*/138,113,139,111,140,107,140,103,  0,  0,
/*3780*/
/*3790*/102,123,105,123,108,125,107,127,105,130,  0,  0,
/*3800*/105,135,111,134,888,888,
/*3810*/"AAAA",2,
/*3820*/102,123,105,123,108,125,107,127,105,130,888,888,
/*3830*/"FFFF",0,
/*3840*/110,144,113,144,888,888,
/*3850*///鼻口
/*3860*/"FFFF",7,
/*3870*/ 97,100, 98,100, 96, 95, 96, 92, 97, 89,  0,  0,
/*3880*/111, 92,111 ,94,112, 97,115, 97,118, 95,119, 96,119, 98,  0,  0,
/*3890*/134,115,136,122,136,127,134,133,131,138,127,143,122,147,117,150,
/*3900*/108,152,888,888,
/*3910*/"AAAA",2,
/*3920*/ 97,100, 98,100, 96, 95, 96, 92, 97, 89,  0,  0,
/*3930*/111, 92,111, 94,112, 97,115, 97,118,95,119,96,119, 98,  0,  0,
/*3940*/134,115,136,122,136,127,134,133,131,138,127,143,122,147,117,150,
/*3950*/108,152,888,888,
/*3960*/"FFFF",0,
/*3970*/119,101,119, 98,122, 95,  0,  0,151,118,152,114,154,112,  0,  0,
/*3980*/152,114,153,115,153,118,888,888,
/*3990*///髪
/*3000*/"FFFF",4,
/*4010*/ 75,118, 74,120, 72,122, 68,124, 56,129, 51,132, 45,136, 40,140,
/*4020*/ 36,145, 33,150, 30,157, 33,154, 36,152, 33,158, 32,163, 32,169,
/*4030*/ 33,174, 36,179, 39,182, 38,177, 38,173, 39,169, 41,175, 44,179,
/*4040*/ 48,182, 52,184, 58,186, 70,188, 76,188,  0,  0,
/*4050*/ 84,134, 84,136, 82,138, 74,143, 70,146, 67,150, 64,155, 63,160,
/*4060*/ 64,162, 66,160, 68,163, 72,167, 77,170, 81,170, 84,168, 88,167,
/*4070*/  0,  0,
/*4080*/ 75,109, 73,106, 71,103, 70,100, 70, 95, 71, 90, 73, 94, 74, 88,
/*4090*/ 77, 82, 81, 77, 85, 73, 87, 71, 87, 70, 85, 68, 82, 68, 76, 71,
/*4100*/ 72, 74, 68, 79, 65, 85, 64, 89, 67, 87, 66, 91, 65, 96, 66,100,
/*4110*/ 68,104, 71,107, 75,109,  0,  0,
/*4120*/150,108,151,104,152, 97,152, 91,151, 86,147, 78,146, 85,144, 80,
/*4130*/141, 75,136, 69,137, 74,137, 78,135, 73,132, 68,128, 64,124, 61,
/*4140*/126, 65,127, 67,123, 64,117, 61,111, 59,109, 59,106, 61,106, 64,
/*4150*/107, 68,110, 73,114, 76,120, 79,129, 83,137, 87,133, 84,131, 81,
/*4160*/129, 77,134, 80,138, 84,142, 89,146, 95,148,101,150,108,  0,  0,
/*4170*/101, 54,107, 52,116, 50,126, 50,136, 52,144, 55,151, 59,160, 65,
/*4180*/168, 70,177, 75,185, 78,200, 82,187, 84,183, 85,180, 87,179, 89,
/*4190*/179, 91,181, 93,191, 95,210, 95,222, 93,230, 91,231, 89,230, 87,
/*4200*/225, 85,215, 83,212, 83,211, 82,217, 80,224, 80,237, 82,245, 84,
/*4210*/250, 86,243, 86,235, 88,241, 88,247, 90,254, 94,259, 98,  0,  0,
/*4220*/272,139,276,137,279,134,283,130,284,125,284,121,  0,  0,
/*4230*/272,147,280,145,285,145,279,148,276,150,272,154,  0,  0,
/*4240*/148,113,147,119,147,124,148,129,150,133,152,135,152,127,155,131,
/*4250*/158,133,164,135,183,137,188,139,194,143,193,140,200,144,205,149,
/*6160*/208,154,210,160,888,888,
/*4270*///マフラー
/*4280*/"FFFF",6,
/*4290*/100,156,100,159,101,162,104,164,113,166,121,166,133,164,137,162,
/*4300*/137,160,133,157,129,155,888,888,
/*4310*/"FFFF",3,
/*4320*/114,168,117,170,127,170,135,172,137,173,137,175,132,175,128,173,
/*4330*/125,173,124,174,124,175,127,176,  0,  0,
/*4340*/ 99,165, 97,167, 97,169,101,172,108,176,114,180,123,183,132,184,
/*4350*/138,184,150,181,158,178,160,176,160,174,156,172,155,172,888,888,
/*4360*///袖左
/*4370*/"FFFF",6,
/*4380*/171,185,171,182,172,177,175,171,178,167,180,167,179,171,177,176,
/*4390*/177,179,178,181,180,181,182,179,184,175,185,175,184,180,182,186,
/*1400*/182,190,183,193,186,195,190,195,196,191,201,187,204,183,205,180,
/*4410*/205,178,  0,  0,
/*4420*/183,155,185,157,185,160,188,158,191,158,193,160,193,164,192,167,
/*4430*/196,165,199,165,201,167,202,171,202,175,201,179,  0,  0,
/*4440*/217,161,219,165,219,169,218,173,222,170,225,166,225,158,224,150,
/*4450*/223,142,223,139,224,135,226,135,229,140,231,148,232,158,232,170,
/*4460*/233,173,235,175,237,175,238,172,239,166,239,162,  0,  0,
/*4470*/258,131,261,128,266,122,  0,  0,
/*4480*/237,115,236,121,236,129,237,136,240,143,244,147,249,150,252,150,
/*4490*/254,148,254,146,251,142,  0,  0,
/*4500*/244,126,247,128,250,132,255,139,258,142,262,144,264,144,266,142,
/*4510*/267,137,  0,  0,
/*4520*/182,219,185,216,187,211,187,209,888,888,
/*4530*/"FFFF",0,
/*4540*/174,191,175,182,177,172,180,163,182,160,183,160,184,162,  0,  0,
/*4550*/176,194,180,189,182,186,184,180,185,175,186,166,  0,  0,
/*4560*/188,208,190,204,193,199,  0,  0,213,146,216,143,218,139,  0,  0,
/*4570*/188,203,195,197,203,191,210,187,  0,  0,
/*4580*/225,140,225,147,226,153,228,159,  0,  0,
/*4590*/227,139,229,147,230,155,230,164,229,172,227,180,225,186,  0,  0,
/*4600*/215,200,218,196,  0,  0,267,151,269,151,272,149,  0,  0,
/*4610*/240,184,241,179,241,175,238,166,  0,  0,
/*4620*/248,132,253,141,258,147,261,149,263,149,265,147,  0,  0,
/*4630*/241,151,244,154,250,157,257,157,266,155,269,153,269,151,888,888,
/*4640*///袖右
/*4650*/"FFFF",6,
/*4660*/119,205,109,200,103,198, 99,198, 99,200,101,202,  0,  0,
/*4670*/133,207,141,210,147,213,149,216,149,218,148,220,  0,  0,
/*4680*/133,207,137,207,  0,  0,
/*4690*/ 75,202, 73,204, 73,206, 76,206, 80,204, 82,204, 84,208, 87,213,
/*4700*/ 90,216, 95,218,105,220,115,220,125,222,129,223,  0,  0,
/*4710*/117,228,116,231,116,233,119,235,123,235,133,231,146,226,150,224,
/*4720*/152,224,150,229,146,235,144,240,144,242,145,244,147,244,151,238,
/*4730*/154,232,158,227,161,225,162,225,160,229,157,236,155,244,155,250,
/*4740*/  0,  0,
/*4750*/158,250,160,243,165,234,172,227,174,227,172,231,170,240,170,243,
/*4760*/171,245,173,245,176,237,180,230,181,230,181,236,183,238,185,238,
/*4770*/888,888,
/*4780*/"FFFF",0,
/*4790*/ 74,216, 78,221,  0,  0, 90,235, 94,238, 97,238,  0,  0,
/*4800*/ 95,242, 98,242,  0,  0, 98,245,101,245,  0,  0,
/*4810*/133,203,138,207,  0,  0,107,230,113,227,121,224,  0,  0,
/*4820*/135,241,135,239,136,236,139,232,144,228,152,224,157,221,  0,  0,
/*4830*/152,224,147,230,142,238,136,250,  0,  0,
/*4840*/149,250,150,244,153,237,156,231,161,225,  0,  0,
/*4850*/162,247,164,238,168,230,173,224,  0,  0,
/*4860*/167,250,166,244,166,240,167,236,169,236,170,238,  0,  0,
/*4870*/176,249,178,238,180,231,182,227,185,224,188,222,  0,  0,
/*4880*/189,250,188,243,188,235,189,228,191,224,193,222,  0,  0,
/*4890*/190,225,196,223,199,223,  0,  0,192,250,201,245,  0,  0,
/*4900*/179,241,179,245,181,250,  0,  0,
/*4910*/187,233,185,251,185,247,888,888,
/*4920*///胸肩
/*4930*/"FFFF",7,
/*4940*/ 78,185, 78,189, 79,194, 80,197,  0,  0,
/*4950*/140,205,138,199,135,195,140,197,144,200,148,204,150,208,888,888,
/*4960*/"aaaa",2,
/*4970*/ 78,185, 78,189,79,194, 80,197,  0,  0,
/*4980*/140,205,138,199,135,195,140,197,144,200,148,204,150,208,888,888,
/*4990*/"FFFF",0,
/*5000*/140,200,143,203,145,207,888,888,
/*5010*///手
/*5020*/"FFFF",7,
/*5030*/267,122,281,110,291, 99,308, 78,  0,  0,
/*5040*/188,235,189,237,192,237,196,235,888,888,
/*5050*/"aaaa",2,
/*5060*/267,122,281,110,291, 99,308, 78,  0,  0,
/*5070*/188,235,189,237,192,237,196,235,888,888,
/*5080*/"FFFF",0,
/*5090*/202,237,203,240,205,243,  0,  0,
/*5100*/208,229,206,233,206,236,208,240,  0,  0,257,248,262,250,  0,  0,
/*5110*/244,233,243,236,243,240,  0,  0,245,237,245,240,247,244,888,888,
/*5120*///マイク
/*5130*/"FFFF",7,
/*5140*/299, 22,302,22,  0,  0,298,28,303, 28,  0,  0,
/*5150*/308, 22,317,22,  0,  0,331,22,351, 22,  0,  0,
/*5160*/356, 22,356,24,  0,  0,312,27,351, 26,  0,  0,
/*5170*///髪飾り
/*5180*/ 84,149, 86,147,88,147,  0,  0,149,147,150,144,151,144,888,888,
/*5190*/"FFFF",3,
/*5200*/ 89,143, 92,145, 94,149, 94,152, 92,156, 89,158, 86,158, 82,155,
/*5210*/ 81,151, 81,149, 83,145, 86,143, 89,143,  0,  0,
/*5220*/150,142,148,144,147,147,147,149,148,151,151,153,156,153,159,151,
/*5230*/160,148,888,888,
/*5240*/"FFFF",0,
/*5250*/299, 20,298, 24,298, 28,299, 32,  0,  0,307, 20,309, 24,  0,  0,
/*5260*/320, 17,317, 22,316, 27,318, 27,323, 23,  0,  0,
/*5270*/353, 20,351, 23,351, 25,352, 28,  0,  0,
/*5280*/353, 22,361, 22,  0,  0,353, 25,356, 25,  0,  0,
/*5290*///耳・角
/*5300*/135, 58,136, 60,140, 60,  0,  0,136, 65,140, 64,  0,  0,
/*5310*/151,118,152,114,154,112,  0,  0,152,114,153,115,153,118,888,888,
/*5320*///追加 マイクヘッド
/*5330*/"FFFF",6,
/*5340*/285, 25,288, 23,291, 22,294, 22,292, 20,289, 20,285, 22,284, 24,
/*5350*/285, 25,  0,  0,
/*5360*/285, 24,288, 22,292, 21,888,888,
/*5370*/"FFFF",0,
/*5380*/ 96,176,103,178,888,888,
/*5390*///背景
/*5440*/"FFFF",7,
/*5410*/ 18,228, 44,220, 63,199, 36,207, 18,228,  0,  0,
/*5420*/  7, 18, 18, 50, 45, 73, 35, 43,  7, 18,  0,  0,
/*5430*/ 85,  0, 74,  7,102, 11,120,  0,  0,  0,
/*5440*/135, 43,162, 20,192, 12,165, 36,135, 43,  0,  0,
/*5450*/240, 45,266, 47,288, 62,265, 60,240, 45,  0,  0,
/*5460*/240,211,273,203,295,183,265,196,240,211,  0,  0,
/*5470*/317,114,335,104,350, 83,331, 93,317,114,  0,  0,
/*5480*/360,  0,370, 17,392, 27,380,  7,364,  0,  0,  0,
/*5490*/327,227,350,211,383,206,363,221,327,227,  0,  0,
/*5500*/372,141,364,126,375,135,  0,  0,378,137,390,147,400+1,167,  0,  0,	// +1補正
/*5510*/374,144,384,163,400+1,177,999,999,	// +1補正
/*5520*/
/*5530*/ // サークル
/*5540*/
/*5550*/  1,1.5,  0,  0, 98,115,  0,  0,
/*5560*/  1,  2,  0,  0,133,108,  0,  0,
/*5570*/0.5,0.5,  7,  7, 97,113,132,106,999,999


];





//-----------------------------------------------------------------------------
let rad = function( deg )
//-----------------------------------------------------------------------------
{
	return deg*Math.PI/180;
}

//-----------------------------------------------------------------------------
let circle = function( context, x,y,r )
//-----------------------------------------------------------------------------
{
	{
		context.beginPath();
		context.arc(x, y, r, 0, Math.PI * 2, true);
		context.closePath();
		context.stroke();
	}
}

let g_tblCol8 =
[

	0x000000,
	0x0000ff,
	0xff0000,
	0xff00ff,
	0x00ff00,
	0x00ffff,
	0xffff00,
	0xffffff,
]

let	g_stat = 0;
let g_idxData = 0;
let g_col = 0;
let g_tile = 0;
let g_back = 0;
let g_tl = 0;
let g_circle_s = 0;
let g_circle_r = 0;
let g_circle_c2 = 0;
let g_circle_c3 = 0;
let g_sx;
let	g_sy;
let g_tlcol;
let g_tlrej;
//-----------------------------------------------------------------------------
function drawVector( gra )
//-----------------------------------------------------------------------------
{
	const STAT_LINE0	= 0;
	const STAT_LINE1	= 1;
	const STAT_LINE2	= 2;
	const STAT_PAINT1	= 5;
	const STAT_PAINT2	= 6;
	const STAT_LP1		= 11;
	const STAT_LP2		= 12;
	const STAT_LP3		= 13;
	const STAT_CIRCLE1	= 21;
	const STAT_CIRCLE2	= 22;
	const STAT_END = 99

	function hexchr( s )
	{

		let str=[];
		for ( let i = 0 ; i < s.length ; i+=6 )
		{
			let b = parseInt( s.substr(i  ,2), 16 );
			let r = parseInt( s.substr(i+2,2), 16 );
			let g = parseInt( s.substr(i+4,2), 16 );
			
			let b0 = (((g>>0)&0x1)<<2) | (((r>>0)&0x1)<<1) | (((b>>0)&0x1)<<0); 
			let b1 = (((g>>1)&0x1)<<2) | (((r>>1)&0x1)<<1) | (((b>>1)&0x1)<<0); 
			let b2 = (((g>>2)&0x1)<<2) | (((r>>2)&0x1)<<1) | (((b>>2)&0x1)<<0); 
			let b3 = (((g>>3)&0x1)<<2) | (((r>>3)&0x1)<<1) | (((b>>3)&0x1)<<0); 
	//		console.log( "hexchr ",s, b0, b1, b2, b3 );

			let c0 = g_tblCol8[b0];
			let c1 = g_tblCol8[b1];
			let c2 = g_tblCol8[b2];
			let c3 = g_tblCol8[b3];

			str.push( [c3, c2, c1, c0] )
		}
		return str;
	}
//	console.log( hexchr("EEFFFFBBFFFF") );
	

	let	ex;
	let	ey;
	switch( g_stat )
	{

	//------------------------
	case STAT_LINE0: // line color
		g_col = g_tblVect[g_idxData++]; 
		g_stat = STAT_LINE1;
		break;

	case STAT_LINE1: // line g_sx g_sy
		g_sx = g_tblVect[g_idxData++];	
		g_sy = g_tblVect[g_idxData++];	
		if ( g_sx == 999 )	{ g_stat = STAT_PAINT1;     break;}
		g_stat = STAT_LINE2
		break;

	case STAT_LINE2: // line ex ey 
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];

//console.log("line)",g_sx,g_sy,ex,ey,g_col);

		if ( ex == 0 )	{g_stat = STAT_LINE1;     break;}	// end segment & color
		gra.line( g_sx,g_sy*g_sc,ex,ey*g_sc, g_tblCol8[g_col] );
		g_sx=ex;
		g_sy=ey;
		break;

	//------------------------
	case STAT_PAINT1: // PAINT
		g_tile = g_tblVect[g_idxData++] 
		g_stat = 	STAT_PAINT2;
		break;

	case STAT_PAINT2: // PAINT
		if( g_flgSleep ) break;
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		if ( ex == 0 )		{g_stat = STAT_PAINT1;     break;}	// end segment & color
		if ( ex == 888 )	{g_stat = STAT_LINE0; 	    break;}	// end segment & color
		if ( ex == 999 )	{g_stat = STAT_LP1; 	    break;}	// end segment & color
		{
			let col = [[884400]];
			let rej = [0];
			col = hexchr( g_tile );
	//		if ( g_tile != "000000" ) rej = [0]; else rej=[0xffffff];
//console.log( "paint ",ex,ey,g_tile,col,rej);
//gra.circle(ex,ey,1,0xff0000,2);
			gra.paint( ex, ey, col,rej );
		}
		break;

	//------------------------
	case STAT_LP1: // LINE&PAINT
		g_tile = g_tblVect[g_idxData++]; 
		g_col  = g_tblVect[g_idxData++]; 
		g_stat = STAT_LP2;
		break;

	case STAT_LP2: // line g_sx g_sy
		g_sx = g_tblVect[g_idxData++];	
		g_sy = g_tblVect[g_idxData++];	 
		g_stat = STAT_LP3
		break;

	case STAT_LP3: // line ex ey 
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
//console.log("lineT)",g_sx,g_sy,ex,ey,g_col,g_tile);
		if ( ex == 0 )		{g_stat = STAT_LP2;     break;}	// end segment & color
		if ( ex == 888 )	{g_stat = STAT_LP1;     break;}	// end segment & color
		if ( ex == 999 )	{g_stat = STAT_CIRCLE1;     break;}	// end segment & color
		gra.line( g_sx,g_sy*g_sc,ex,ey*g_sc, g_tblCol8[ g_col ], parseInt( g_tile, 16 ) );
		g_sx=ex;
		g_sy=ey;
		break;

	//------------------------
	case STAT_CIRCLE1: // サークル
		g_circle_s = g_tblVect[g_idxData++];	
		g_circle_r = g_tblVect[g_idxData++];	
		g_circle_c2 = g_tblVect[g_idxData++];	
		g_circle_c3 = g_tblVect[g_idxData++];	
		g_stat = STAT_CIRCLE2;
		break;
		
	case STAT_CIRCLE2: // サークル
		if( g_flgSleep ) break;
		ex = g_tblVect[g_idxData++];	
		ey = g_tblVect[g_idxData++];	
		if ( ex == 0 )		{g_stat = STAT_CIRCLE1;     break;}	// end segment & color
		if ( ex == 999 )	{g_stat = STAT_END; 	    break;}	// end segment & color
//console.log("CIR ",ex,ey,g_circle_r,g_circle_c3,g_circle_c2,g_circle_s);
		gra.circle(ex,ey,g_circle_r/2,g_tblCol8[g_circle_c2],2); // N88 補正
//		gra.circle(ex,ey,g_circle_r/2,0xff0000,2); // N88 補正
		{
			let col = [[g_tblCol8[g_circle_c3]]];
			let rej = [g_tblCol8[g_circle_c2]];
//gra.circle(ex,ey,1,0xffff00,2);
			gra.paint( ex, ey, col,rej );
		}
		break;


	}
}

//Key
const	KEY_CR	= 13;
const	KEY_0		= 48;
const	KEY_1		= 49;
const	KEY_2		= 50;
const	KEY_3		= 51;
const	KEY_4		= 52;
const	KEY_5		= 53;
const	KEY_6		= 54;
const	KEY_7		= 55;
const	KEY_8		= 56;
const	KEY_9		= 57;
const	KEY_A		= 65;
const	KEY_B		= 66;
const	KEY_C		= 67;
const	KEY_D		= 68;
const	KEY_E		= 69;
const	KEY_F		= 60;
const	KEY_I		= 73;
const	KEY_O		= 79;
const	KEY_Z		= 90;
const	KEY_X		= 88;
const	KEY_LEFT	= 37;
const	KEY_UP		= 38;
const	KEY_RIGHT	= 39;
const	KEY_DOWN	= 40;
let g_idxSample = 0;
let g_idxPal = 2;
//-----------------------------------------------------------------------------
window.onkeydown = function( ev )
//-----------------------------------------------------------------------------
{

	let	c = ev.keyCode;


}
//-----------------------------------------------------------------------------
function draw_image( img )
//-----------------------------------------------------------------------------
{
// 引き伸ばして表示
    let cv=document.createElement('canvas');				// 新たに<canvas>タグを生成
    cv.width=img.width;
    cv.height=img.height;
	cv.getContext("2d").putImageData(img,0,0);				// 作成したcanvasにImageDataをコピー
	{
		let sx = 0;
		let sy = 0;
		let sw = img.width;
		let sh = img.height;
		let dx = 0;
		let dy = 0;
		let dw = 640;
		let dh = 400;

		g_context.drawImage( cv,sx,sy,sw,sh,dx,dy,dw,dh);	// ImageDataは引き延ばせないけど、Imageは引き延ばせる
	}
	
}
//-----------------------------------------------------------------------------
function print( tx, ty, str )
//-----------------------------------------------------------------------------
{
	g_context.font = "12px monospace";
	g_context.fillStyle = "#000000";
	g_context.fillStyle = "#FFFFFF";
	g_context.fillText( str, tx, ty );
}

//-----------------------------------------------------------------------------
window.onload = function()
//-----------------------------------------------------------------------------
{
	gra.window(0,0,639,199, 0,0,400,250);			
	gra.cls( 0x00ff00 );			

	g_idxData = 0;
	g_stat = 0;
	
//	gra.cls( 0x0000ff );			

//	gra.cls( 0x0000ff );			

//	gra.box( 0,0, 639, 199, _2 );
//	gra.paint( 100,10, [[_2]],[_2] );

	update();
}

//-----------------------------------------------------------------------------
function update()
//-----------------------------------------------------------------------------
{
	for ( let i = 0 ; i < 10 ; i ++ )
	{
		if ( g_idxData < g_tblVect.length && g_stat != 99 )
		{
			drawVector( gra );
		}
	}
//	gra.circle(350,200,2,0xff0000,2);
//	gra.line(100,100,350,200,0xff0000,0xaaaa);
	draw_image( gra.img );
	requestAnimationFrame( update );
}
